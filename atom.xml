<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大道至简</title>
  
  <subtitle>以不变应万变</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.matosiki.site/"/>
  <updated>2020-06-04T02:02:07.181Z</updated>
  <id>http://www.matosiki.site/</id>
  
  <author>
    <name>iki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/tools/%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8Postman%E8%BF%9B%E8%A1%8CMock%20Server/"/>
    <id>http://www.matosiki.site/blog/tools/高效的使用Postman进行Mock Server/</id>
    <published>2020-06-04T02:02:07.181Z</published>
    <updated>2020-06-04T02:02:07.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-添加Example"><a href="#1-添加Example" class="headerlink" title="1. 添加Example"></a>1. 添加Example</h3><p>在自己添加的collection中,正常测试完成,将response保存为Example.这样防止API接口断供后,无法获取数据,这样可以从Example中查看到保存的Response.</p><p>但是如果你想,根据Example做一个MockServer,这样每次访问接口都能拿到Example中Response的结果了.<br>接下来,第一步将Response保存到Example中.<br><img src="http://img.matosiki.site/image/postman_request_example.png" alt=""></p><p>在弹出的页面中填写好Example的名称,还可以自己调正Response返回的值.<br><img src="http://img.matosiki.site/image/postman_request_example_save.png" alt=""></p><h3 id="2-添加mock环境"><a href="#2-添加mock环境" class="headerlink" title="2. 添加mock环境"></a>2. 添加mock环境</h3><p>正常情况下有一个collection的环境,但为了mock测试方便,新建一个mock环境.<br><img src="http://img.matosiki.site/image/postman_request_env_mock.png" alt=""><br>注意: mock环境中有两个变量,<strong>x-api-key</strong>这个需要在自己的workspace上生成, <strong>url</strong>这个需要等到mock server 创建时填写.<br><img src="http://img.matosiki.site/image/postman_request_env_mock_edit.png" alt=""></p><h3 id="3-新建mock-server"><a href="#3-新建mock-server" class="headerlink" title="3.新建mock server"></a>3.新建mock server</h3><p>在postman中,点击<strong>New</strong>按钮,选择Mock Server,会看到如下图对话框<br>在第一步中选择 <strong>Select an existing collection</strong> 选择 <strong>eureka</strong>collection,点击<strong>Next</strong>.<br><img src="http://img.matosiki.site/image/postman_mock_server_new.png" alt=""><br>第二步,设置mock server,注意选择 eureka mock 环境,并且注意要去自己的workspace生成<strong>x-api-key</strong>,再点击<strong>Next</strong>,页面会返回一个URL,这个就是Mock URL,复制这个变量拷贝到mock环境变量中,到这里差不多就快完成了,还有最后<br><img src="http://img.matosiki.site/image/postman_mock_server_new_api.png" alt=""></p><p>如果找不到Mock Server Url 也可以去workspace中找到.<br><img src="http://img.matosiki.site/image/postman_mock_server_web.png" alt=""></p><h3 id="4-生成API-KEY"><a href="#4-生成API-KEY" class="headerlink" title="4.生成API-KEY"></a>4.生成API-KEY</h3><p>进入自己的workspace,生成自己的API key,复制Api-key到mock 环境中,完成了mock环境配置.<br><img src="http://img.matosiki.site/image/postman_api_key_web.png" alt=""></p><h3 id="5-Runner测试"><a href="#5-Runner测试" class="headerlink" title="5.Runner测试"></a>5.Runner测试</h3><p>最后我们来测试mock server,选择collection,添加Runner,选择环境变量,运行测试.<br><img src="http://img.matosiki.site/image/postman_mock_server_new_mock_test.png" alt=""><br>查看测试结果<br><img src="http://img.matosiki.site/image/postman_mock_server_new_mock_test_success.png" alt=""></p><p>总结: 如何使用postman进行mock server 对接口进行测试.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://learning.getpostman.com/docs/postman/postman_api/intro_api/" target="_blank" rel="noopener">Postman API</a></li><li><a href="https://learning.getpostman.com/docs/postman/collections/examples/" target="_blank" rel="noopener">Postman Examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-添加Example&quot;&gt;&lt;a href=&quot;#1-添加Example&quot; class=&quot;headerlink&quot; title=&quot;1. 添加Example&quot;&gt;&lt;/a&gt;1. 添加Example&lt;/h3&gt;&lt;p&gt;在自己添加的collection中,正常测试完成,将respon
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/terraform/terraform%E7%90%86%E8%A7%A3%E5%85%A5%E9%97%A8/"/>
    <id>http://www.matosiki.site/blog/terraform/terraform理解入门/</id>
    <published>2020-06-04T02:02:07.180Z</published>
    <updated>2020-06-04T02:04:48.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="腾讯云栗子"><a href="#腾讯云栗子" class="headerlink" title="腾讯云栗子"></a>腾讯云栗子</h2><p><a href="http://doc.matosiki.site/terraform/tencentcloud-demo-module.zip" target="_blank" rel="noopener">下载-tencentcloud-demo-module.zip</a></p><h3 id="Terraform是一种安全有效地构建，更改和版本化基础架构的工具。"><a href="#Terraform是一种安全有效地构建，更改和版本化基础架构的工具。" class="headerlink" title="Terraform是一种安全有效地构建，更改和版本化基础架构的工具。"></a>Terraform是一种安全有效地构建，更改和版本化基础架构的工具。</h3><p>Terraform用于创建，管理和更新基础架构资源，例如物理机，VM，网络交换机，容器等。几乎任何基础设施类型都可以表示为Terraform中的资源。</p><h3 id="四大功能"><a href="#四大功能" class="headerlink" title="四大功能"></a>四大功能</h3><ol><li>基础设置代码</li><li>执行计划</li><li>资源图</li><li>自动更新</li></ol><h3 id="Terraform使用场景"><a href="#Terraform使用场景" class="headerlink" title="Terraform使用场景"></a>Terraform使用场景</h3><ol><li>Heroku应用设置</li><li>多层应用</li><li>自助服务集群</li><li>软件演示</li><li>一次性环境</li><li>软件定义网络（SDN）</li><li>资源调度程序</li><li>多云部署</li></ol><h3 id="使用terraform"><a href="#使用terraform" class="headerlink" title="使用terraform"></a>使用terraform</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener">下载</a>windows版本<br>使用命令验证安装<br>将terraform.exe拷贝到指定目录,并设置path环境变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform</span><br></pre></td></tr></table></figure></p><p>设置环境变量 插件缓存目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set TF_PLUGIN_CACHE_DIR=&quot;%HOME%\.terraform.d\plugin-cache&quot;</span><br></pre></td></tr></table></figure><p>手动安装插件目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%APPDATA%\terraform.d\plugins</span><br></pre></td></tr></table></figure><p>手动安装provider插件<br><a href="https://github.com/terraform-providers/terraform-provider-aws" target="_blank" rel="noopener">aws-provider插件</a><br><a href="https://github.com/terraform-providers/terraform-provider-google" target="_blank" rel="noopener">google-provider插件</a></p><h3 id="构建基础架构"><a href="#构建基础架构" class="headerlink" title="构建基础架构"></a>构建基础架构</h3><h4 id="一-配置"><a href="#一-配置" class="headerlink" title="一.配置"></a>一.配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  profile    = &quot;default&quot;</span><br><span class="line">  region     = &quot;us-east-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  ami           = &quot;ami-2757f631&quot;</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-初始化"><a href="#二-初始化" class="headerlink" title="二.初始化"></a>二.初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform init</span><br><span class="line">terraform apply </span><br><span class="line">terrafomr show</span><br></pre></td></tr></table></figure><h4 id="三-应用更改"><a href="#三-应用更改" class="headerlink" title="三.应用更改"></a>三.应用更改</h4><p>更改ami<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  ami           = &quot;ami-b374d5a5&quot;</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terrafomr show</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 销毁基础设施</span><br><span class="line">terraform destroy</span><br></pre></td></tr></table></figure><h4 id="四-资源依赖"><a href="#四-资源依赖" class="headerlink" title="四.资源依赖"></a>四.资源依赖</h4><ol><li><p>隐性依赖<br>Terraform可以自动推断出一个资源何时依赖于另一个资源.<br>Terraform使用此依赖关系信息来确定创建不同资源的正确顺序<br>通过插值表达式的隐式依赖关系是告知Terraform关于这些关系的主要方式，应尽可能使用。</p></li><li><p>显式依赖<br>depends_on任何资源都接受该参数，并接受资源列表以创建显式依赖项。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">depends_on=[google_instance.example]</span><br></pre></td></tr></table></figure><ol start="3"><li>非资源依赖<br>Terraform将同时执行操作以减少应用更改所需的总时间,非资源依赖与其他资源依赖的可能同时创建.</li></ol><h4 id="五-提供"><a href="#五-提供" class="headerlink" title="五.提供"></a>五.提供</h4><p>负责实例创建完成初始化工作,比如运行shell、触发软件配置等等.</p><ol><li>定义提供者</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">provisioner &quot;local-exec&quot; &#123;</span><br><span class="line">  command = &quot;echo $&#123;aws_instance.example.public_ip&#125; &gt; ip_address.txt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terraform可以定义多个提供者</p><ol start="2"><li>应用配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply</span><br><span class="line">cat ip_address.txt</span><br></pre></td></tr></table></figure></li></ol><p><strong>失败的提供者和污点资源</strong></p><p>如果资源成功创建但在配置期间失败，则Terraform将发生错误并将资源标记为“受污染”。一个污点资源已被物理创建出来，由于预配失败，将无法被视为安全的使用。</p><p>当执行下一个计划时，因为不能保证安全，terraform不会在相同的资源上尝试重启预配置。取代方式是，terraform将移除所有污点资源，然后再创建资源并尝试预配置。</p><p>因为违反了执行计划，当执行期间失败时，terraform不会回滚和删除资源。</p><p>执行计划只告诉资源的创建，不会有删除资源，如果创建一个污点资源，计划将清除状态，资源将被删除。</p><h4 id="销毁provisioners"><a href="#销毁provisioners" class="headerlink" title="销毁provisioners"></a>销毁provisioners</h4><p>还可以定义仅在销毁操作期间运行的供应商。这些对于执行系统清理，提取数据等非常有用。<br>对于许多资源，建议尽可能使用内置清理机制（例如init脚本），但必要时可以使用配置程序。</p><p><a href="https://www.terraform.io/docs/provisioners/" target="_blank" rel="noopener">provisioners详细文档</a></p><h4 id="输入变量"><a href="#输入变量" class="headerlink" title="输入变量"></a>输入变量</h4><ol><li><p>定义变量<br>创建<strong>variables.tf</strong>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variable &quot;region&quot; &#123;</span><br><span class="line">  default = &quot;us-east-1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  region = &quot;$&#123;var.region&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分配变量"><a href="#分配变量" class="headerlink" title="分配变量"></a>分配变量</h3><ol><li><p>命令行分配方式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply   -var region=us-east-2</span><br></pre></td></tr></table></figure></li><li><p>从文件中分配<br>创建目录匹配<strong>terraform.tfvars</strong>或 <strong>.auto.tfvars</strong>存在的所有文件，分配变量值。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">region = &quot;us-east-2&quot;</span><br></pre></td></tr></table></figure><p>指定多个变量文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply \</span><br><span class="line">  -var-file=&quot;secret.tfvars&quot; \</span><br><span class="line">  -var-file=&quot;production.tfvars&quot;</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>环境变量<br>Terraform读取<strong>TF_VAR_name</strong>变量，<strong>TF_VAR_region </strong>设置region变量</p></li><li><p>UI输入<br>如果您terraform apply使用未指定的某些变量执行，Terraform将要求您以交互方式输入其值。</p></li></ol><p>定义list类型变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 隐式声明</span><br><span class="line"># implicitly by using brackets [...]</span><br><span class="line">variable &quot;cidrs&quot; &#123; default = [] &#125;</span><br><span class="line"></span><br><span class="line"># 显式声明</span><br><span class="line"># explicitly</span><br><span class="line">variable &quot;cidrs&quot; &#123; type = list &#125;</span><br></pre></td></tr></table></figure><p><strong>terraform.tfvars</strong>文件中定义<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cidrs = [ &quot;10.0.0.0/16&quot;, &quot;10.1.0.0/16&quot; ]</span><br></pre></td></tr></table></figure></p><p>定义map类型变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variable &quot;amis&quot; &#123;</span><br><span class="line">  type = &quot;map&quot;</span><br><span class="line">  default = &#123;</span><br><span class="line">    &quot;us-east-1&quot; = &quot;ami-b374d5a5&quot;</span><br><span class="line">    &quot;us-west-2&quot; = &quot;ami-4b32be2b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  ami           = var.amis[var.region]</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行分配map类型变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply -var &apos;amis=&#123; us-east-1 = &quot;foo&quot;, us-west-2 = &quot;bar&quot; &#125;&apos;</span><br></pre></td></tr></table></figure></p><p>栗子<br>variables.tf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variable &quot;region&quot; &#123;&#125;</span><br><span class="line">variable &quot;amis&quot; &#123;</span><br><span class="line">  type = &quot;map&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>terraform.tfvars<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">amis = &#123;</span><br><span class="line">  &quot;us-east-1&quot; = &quot;ami-abc123&quot;</span><br><span class="line">  &quot;us-west-2&quot; = &quot;ami-def456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.tf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  # ami           = &quot;ami-b374d5a5&quot;</span><br><span class="line">  ami           = &quot;$&#123;var.amis[var.region]&#125;&quot;</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line">&#125;</span><br><span class="line">output &quot;ami&quot; &#123;</span><br><span class="line">  value = aws_instance.example.ami</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cli<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply -var region=us-west-2</span><br></pre></td></tr></table></figure></p><h4 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h4><ol><li>定义输出<br>添加到任何 <strong>*.tf</strong> 文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output &quot;ip&quot; &#123;</span><br><span class="line">  value = aws_eip.ip.public_ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>output可以定义多个块以指定多个输出变量。</p><p>2.查看输出<br>命令行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform ouput ip</span><br></pre></td></tr></table></figure><p>此命令对于脚本提取输出很有用</p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>Terraform中的模块是Terraform配置的独立包，可作为一个组进行管理。模块用于创建可重用组件，改进组织，并将基础架构处理为黑盒子。<br><a href="https://www.terraform.io/docs/modules/index.html" target="_blank" rel="noopener">模块文档</a></p><ol><li>使用模块</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  required_version = &quot;0.12.5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  access_key = &quot;AWS ACCESS KEY&quot;</span><br><span class="line">  secret_key = &quot;AWS SECRET KEY&quot;</span><br><span class="line">  region     = &quot;us-east-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module &quot;consul&quot; &#123;</span><br><span class="line">  source      = &quot;hashicorp/consul/aws&quot;</span><br><span class="line">  num_servers = &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该source属性是模块的唯一必需参数。它告诉Terraform可以检索模块的位置。Terraform会自动为您下载和管理模块。</p><p>模块从官方Terraform Registry中检索。Terraform还可以从各种来源检索模块，包括私有模块注册表或直接从Git，Mercurial，HTTP和本地文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><ol start="2"><li>应用更改</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform apply</span><br></pre></td></tr></table></figure><ol start="3"><li>模块输出<br><a href="https://registry.terraform.io/modules/hashicorp/consul/aws?tab=outputs" target="_blank" rel="noopener">模块输出文档</a><br>描述了它产生的所有不同值。总的来说，它暴露了它创建的每个资源的id，以及回显一些输入值。</li><li>销毁<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform destroy</span><br></pre></td></tr></table></figure></li></ol><h4 id="远程状态存储"><a href="#远程状态存储" class="headerlink" title="远程状态存储"></a>远程状态存储</h4><p><a href="https://www.terraform.io/docs/backends/index.html" target="_blank" rel="noopener">远程后端文档</a><br>远程后端允许Terraform使用共享存储空间来存储状态数据，因此团队中的任何成员都可以使用Terraform来管理相同的基础架构。</p><h5 id="1-如何远程状态存储"><a href="#1-如何远程状态存储" class="headerlink" title="1. 如何远程状态存储"></a>1. 如何远程状态存储</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;remote&quot; &#123;</span><br><span class="line">    organization = &quot;Cloud-Org&quot;</span><br><span class="line"></span><br><span class="line">    workspaces &#123;</span><br><span class="line">      name = &quot;Dev-QA&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-远程状态存储方案"><a href="#2-远程状态存储方案" class="headerlink" title="2. 远程状态存储方案"></a>2. 远程状态存储方案</h5><h5 id="3-Terraform-Cloud文档"><a href="#3-Terraform-Cloud文档" class="headerlink" title="3. Terraform Cloud文档"></a>3. <a href="https://www.hashicorp.com/products/terraform/?utm_source=oss&amp;utm_medium=getting-started&amp;utm_campaign=terraform" target="_blank" rel="noopener">Terraform Cloud文档</a></h5><p>它支持执行Terraform运行的两个主要工作流程：</p><ul><li>VCS驱动的工作流，在将更改提交到配置的VCS存储库时，它会自动对计划进行排队。</li><li>API驱动的工作流，CI管道或其他自动化工具可以直接上传配置。</li></ul><ol><li>登录<a href="https://app.terraform.io/app" target="_blank" rel="noopener">terraform cloud console</a></li><li>升级terraform版本到0.11.13以上</li><li>在cloud上创建组织</li><li>添加组织成员</li><li>在cloud上添加<a href="https://app.terraform.io/app/settings/tokens" target="_blank" rel="noopener">access token</a>并配置本机认证<br>文件<strong>%APPDATA%\terraform.rc</strong></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">credentials &quot;app.terraform.io&quot; &#123;</span><br><span class="line">  token = &quot;REPLACE_ME&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>在配置中开启terraform remote state 配置</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;remote&quot; &#123;</span><br><span class="line">    organization = &quot;max&quot;</span><br><span class="line"></span><br><span class="line">    workspaces &#123;</span><br><span class="line">      name = &quot;app-max-hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>重新初始化并运行terraform</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform init</span><br></pre></td></tr></table></figure><ol start="8"><li>协作查看</li></ol><ul><li>查看工作区</li><li>工作区锁定</li><li>查看状态历史版本</li></ul><ol start="9"><li>删除工作空间</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform destroy -auto-approve</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;腾讯云栗子&quot;&gt;&lt;a href=&quot;#腾讯云栗子&quot; class=&quot;headerlink&quot; title=&quot;腾讯云栗子&quot;&gt;&lt;/a&gt;腾讯云栗子&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://doc.matosiki.site/terraform/tencentcloud-d
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/tools/%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8Postman%E8%BF%9B%E8%A1%8CAPI%E8%B0%83%E8%AF%95/"/>
    <id>http://www.matosiki.site/blog/tools/高效的使用Postman进行API调试/</id>
    <published>2020-06-04T02:02:07.180Z</published>
    <updated>2020-06-04T02:02:07.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在postman使用中,很多接口使用共同的请求地址和相同的参数,这样我们可以定义一些公共的环境变量,每个collection可以使用变量.postman也内置了一些变量,比如生成随机数,生成字符串,生成id,这些变量用于表单测试是非常方便的.</p><p>下面我就简简单单定义变量和请求参数自定义装饰器并测试结果.</p><h3 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h3><p><img src="http://img.matosiki.site/image/postman/postman_def_env_variable.png" alt="img"><br>在postman中可以自定义环境变量,我们可以添加全局变量也可以添加自定义collection的变量,这里我定义了一个,eureka集合的变量,其中包含主机名和端口地址等变量.</p><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用变量目前有三种方式:</p><ul><li>第一种如图,在表单中添加变量,注意使用<strong>  </strong>中的变量将会被定义的变量值替换掉</li></ul><p><img src="http://img.matosiki.site/image/postman/postman_use_env_variable_form_data.png" alt="img"></p><ul><li>第二种如图, 在使用application/json的方式发送请求时,就没办法使用<strong>  </strong>形式的变量.此时我们需要在pre-request-Srcipt中手动些装饰器,将<strong></strong>替换掉.<br>在这种方式下可分为两种具体实现:</li></ul><ol><li>方式一:将使用replace替换<strong>  </strong>内置变量</li><li>方式二:解析json为obj对象,然后更改obj对象的值</li></ol><p><img src="http://img.matosiki.site/image/postman/postman_use_env_variable_json.png" alt="img"></p><p>json请求值:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;instance&quot;: &#123;</span><br><span class="line">        &quot;instanceId&quot;: &quot;&#123;&#123;appID&#125;&#125;:11101&quot;,</span><br><span class="line">        &quot;app&quot;: &quot;&#123;&#123;appID&#125;&#125;&quot;,</span><br><span class="line">        &quot;appGroutName&quot;: null,</span><br><span class="line">        &quot;ipAddr&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;sid&quot;: &quot;na&quot;,</span><br><span class="line">        &quot;homePageUrl&quot;: null,</span><br><span class="line">        &quot;statusPageUrl&quot;: null,</span><br><span class="line">        &quot;healthCheckUrl&quot;: null,</span><br><span class="line">        &quot;secureHealthCheckUrl&quot;: null,</span><br><span class="line">        &quot;vipAddress&quot;: &quot;tf-service&quot;,</span><br><span class="line">        &quot;secureVipAddress&quot;: &quot;tf-service&quot;,</span><br><span class="line">        &quot;countryId&quot;: 1,</span><br><span class="line">        &quot;dataCenterInfo&quot;: &#123;</span><br><span class="line">            &quot;@class&quot;: &quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;MyOwn&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;hostName&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">        &quot;leaseInfo&quot;: null,</span><br><span class="line">        &quot;isCoordinatingDiscoveryServer&quot;: false,</span><br><span class="line">        &quot;lastUpdatedTimestamp&quot;: 1529391461000,</span><br><span class="line">        &quot;lastDirtyTimestamp&quot;: 1529391461000,</span><br><span class="line">        &quot;actionType&quot;: null,</span><br><span class="line">        &quot;asgName&quot;: null,</span><br><span class="line">        &quot;overridden_status&quot;: &quot;UNKNOWN&quot;,</span><br><span class="line">        &quot;port&quot;: &#123;</span><br><span class="line">            &quot;$&quot;: 11102,</span><br><span class="line">            &quot;@enabled&quot;: &quot;false&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;securePort&quot;: &#123;</span><br><span class="line">            &quot;$&quot;: 7002,</span><br><span class="line">            &quot;@enabled&quot;: &quot;false&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;metadata&quot;: &#123;</span><br><span class="line">            &quot;@class&quot;: &quot;java.util.Collections$EmptyMap&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>pre-request-Srcipt中的内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 检查请求头是否是json</span><br><span class="line"></span><br><span class="line">function isJsonReq()&#123;</span><br><span class="line">   var header =  pm.request.headers;</span><br><span class="line">   header.each(function(v)&#123;</span><br><span class="line">       if(v[&apos;key&apos;]==&apos;Content-Type&apos;&amp;&amp;v[&apos;value&apos;]==&quot;application/json&quot;)&#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   return false;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 方法一: 替换全局变量</span><br><span class="line">pm.request.body.raw = replace(pm.request.body.raw);</span><br><span class="line">console.log(pm.request)</span><br><span class="line"></span><br><span class="line">function replace(reqbody)&#123;</span><br><span class="line">    if(reqbody&amp;&amp;isJsonReq())&#123;</span><br><span class="line">        var values = pm.environment.values;</span><br><span class="line">        values.each(function(v)&#123;</span><br><span class="line">          reqbody = reqbody.replace(new RegExp(&quot;&#123;&#123;&quot;+v[&apos;key&apos;]+&quot;&#125;&#125;&quot;,&apos;g&apos;),v[&apos;value&apos;])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return reqbody;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 方法二: 动态生成编号</span><br><span class="line"></span><br><span class="line">gen(pm.request.body.raw);</span><br><span class="line"></span><br><span class="line">console.log(pm.ace)</span><br><span class="line"></span><br><span class="line">function gen(reqbody)&#123;</span><br><span class="line">    if(reqbody&amp;&amp;isJsonReq())&#123;</span><br><span class="line">       var obj = JSON.parse(reqbody)</span><br><span class="line">       obj = doit(obj) //实现对象属性值替换</span><br><span class="line">       pm.request.body.raw =  JSON.stringify(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doit(obj)&#123;</span><br><span class="line">    obtuoj[&apos;instance&apos;][&apos;instanceID&apos;]=require(&apos;uuid&apos;)();</span><br><span class="line">    // todo 替换变量</span><br><span class="line">    console.log(obj)</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用高级js库"><a href="#使用高级js库" class="headerlink" title="使用高级js库"></a>使用高级js库</h3><p>在postman的沙盒环境中,我们可以使用一些高级的js库.<br>我们可以在pre-request-script和end-test中使用.<br><img src="http://img.matosiki.site/image/postman/postman_pre_script.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Ajv = require(&apos;ajv&apos;);</span><br><span class="line">var ajv = new Ajv();</span><br><span class="line">// 根据schema验证json</span><br><span class="line">// var validate = ajv.compile(schema);</span><br><span class="line">// var valid = validate(data);</span><br><span class="line">// if (!valid) console.log(validate.errors);</span><br><span class="line"></span><br><span class="line">// atob </span><br><span class="line">var atob = require(&apos;atob&apos;);</span><br><span class="line">var b64 = &quot;SGVsbG8sIFdvcmxkIQ==&quot;;</span><br><span class="line">var bin = atob(b64); // base64转ascii码</span><br><span class="line">console.log(bin);</span><br><span class="line"></span><br><span class="line">var btoa = require(&apos;btoa&apos;);</span><br><span class="line">var b64 = btoa(bin);</span><br><span class="line">console.log(b64);</span><br><span class="line"></span><br><span class="line">var should = require(&apos;chai&apos;).should() // BDD/TDD assert 库</span><br><span class="line">  , foo = &apos;bar&apos;</span><br><span class="line">  , beverages = &#123; tea: [ &apos;chai&apos;, &apos;matcha&apos;, &apos;oolong&apos; ] &#125;;</span><br><span class="line"></span><br><span class="line">foo.should.be.a(&apos;string&apos;);</span><br><span class="line">foo.should.equal(&apos;bar&apos;);</span><br><span class="line">foo.should.have.lengthOf(3);</span><br><span class="line">beverages.should.have.property(&apos;tea&apos;).with.lengthOf(3)</span><br><span class="line"></span><br><span class="line">var CryptoJS = require(&quot;crypto-js&quot;);</span><br><span class="line">console.log(CryptoJS.HmacSHA1(&quot;Message&quot;, &quot;Key&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var moment = require(&apos;moment&apos;);</span><br><span class="line">console.log(moment().format())</span><br><span class="line"></span><br><span class="line">const uuidv1 = require(&apos;uuid&apos;);</span><br><span class="line">console.log(uuidv1())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const &#123; StringDecoder &#125; = require(&apos;string_decoder&apos;);</span><br><span class="line">const decoder = new StringDecoder(&apos;utf8&apos;);</span><br><span class="line">const cent = Buffer.from([0xC2, 0xA2]);</span><br><span class="line">console.log(decoder.write(cent));</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">console.log(path.basename(&apos;C:\\temp\\myfile.html&apos;))</span><br><span class="line">const assert = require(&apos;assert&apos;);</span><br><span class="line"></span><br><span class="line">assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, &apos;3&apos;]], 4, 5]);</span><br><span class="line"></span><br><span class="line">const util = require(&apos;util&apos;);</span><br><span class="line"></span><br><span class="line">// console.log(require(&apos;lodash&apos;).join([1,24,5],[1234]))</span><br><span class="line"></span><br><span class="line">var _ = require(&apos;lodash&apos;);</span><br><span class="line">console.log(_.random(5, true)) //生成随机数1-5</span><br><span class="line">var abc = function(a,b,c)&#123;</span><br><span class="line">    return [a,b,c];</span><br><span class="line">&#125;</span><br><span class="line">var curried = _.curry(abc);</span><br><span class="line">console.log(curried(1)(2)(3)) //函数柯里化</span><br><span class="line">console.log(_.now()) //获取当前时间搓</span><br><span class="line"></span><br><span class="line">var timer = require(&apos;timers&apos;)</span><br><span class="line">console.log(timer)</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在每次请求后还可以编写断言脚本验证结果</p><p><img src="http://img.matosiki.site/image/postman/postman_end_test.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tests[&quot;请求成功&quot;] = responseCode.code === 204;</span><br><span class="line">pm.test(&quot;注册新实例成功&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.body(&quot;&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考:</p><ul><li><a href="https://learning.getpostman.com/docs/postman/scripts/postman_sandbox_api_reference/" target="_blank" rel="noopener">postman官方文档-sanbox</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在postman使用中,很多接口使用共同的请求地址和相同的参数,这样我们可以定义一些公共的环境变量,每个collection可以使用变量.p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/terraform/terraform%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.matosiki.site/blog/terraform/terraform进阶实践/</id>
    <published>2020-06-04T02:02:07.180Z</published>
    <updated>2020-06-04T02:04:52.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="http://img.matosiki.site/image/terrafrom/terraform_arch.jpg" alt="image"></p><h3 id="一、导入"><a href="#一、导入" class="headerlink" title="一、导入"></a>一、导入</h3><p>terraform 用户导入现有的基础结构</p><h3 id="二、状态"><a href="#二、状态" class="headerlink" title="二、状态"></a>二、状态</h3><p>Terraform必须存储有关托管基础架构和配置的状态。Terraform使用此状态将现实世界资源映射到您的配置，跟踪元数据并提高大型基础架构的性能。<br>默认情况下，此状态存储在名为“terraform.tfstate”的本地文件中，但也可以远程存储，这在团队环境中更有效。</p><p>Terraform使用此本地状态来创建计划并对您的基础架构进行更改。在任何操作之前，Terraform会进行 刷新以使用真实基础架构更新状态。</p><p> terraform state命令，使用CLI对状态进行基本修改。</p><ol><li>terraform state目的</li></ol><p><strong>映射真实世界</strong></p><p>terraform需要某种数据库来将Terraform配置映射到现实世界。</p><p><strong>元数据</strong></p><p>Terraform通常使用配置来确定依赖顺序，但是，从Terraform配置中删除资源时，Terraform必须知道如何删除该资源。<br>Terraform还出于类似的原因存储其他元数据，例如指向最近在存在多个别名提供程序的情况下与资源一起使用的提供程序配置的指针。</p><p><strong>表现</strong><br>Terraform还为状态中的所有资源存储属性值的缓存，terraform plan，Terraform必须知道当前的资源状态，以便有效地确定为达到所需配置而需要进行的更改</p><p><strong>同步</strong><br>在默认配置中，Terraform将状态存储在运行Terraform的当前工作目录中的文件中</p><ol start="2"><li>导入现有资源</li><li>锁<br>如果您的后端支持，Terraform将锁定您可以写入状态的所有操作的状态。这可以防止他人获得锁定并可能破坏您的状态。</li><li>工作空间<br>每个Terraform配置都有一个关联的后端 ，用于定义操作的执行方式以及存储Terraform状态等持久性数据的位置。</li></ol><p>支持工作区有： AzureRM、Consul、GCS、local、manta、pg、remote、S3<br>当前工作区插值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  count = &quot;$&#123;terraform.workspace == &quot;default&quot; ? 5 : 1&#125;&quot;</span><br><span class="line">  # ... other arguments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>远程状态</li></ol><p>将状态远程存储起来，Terraform还可以使用 状态锁定来防止Terraform在同一状态下并发运行，从而到达团队协作。</p><ol start="6"><li>敏感数据<br>使用本地状态时，state存储在纯文本JSON文件中。使用远程状态时，状态仅在Terraform使用时保存在内存中。它可以在静止时加密，但这取决于特定的远程状态后端。远程存储状态可能会为您提供静态加密，具体取决于您选择的后端。</li></ol><h3 id="三、提供商"><a href="#三、提供商" class="headerlink" title="三、提供商"></a>三、提供商</h3><p>云提供商: 亚马逊、谷歌、百度云、阿里云、腾讯云等等。</p><h3 id="四、预配器"><a href="#四、预配器" class="headerlink" title="四、预配器"></a>四、<a href="https://www.terraform.io/docs/provisioners/connection.html" target="_blank" rel="noopener">预配器</a></h3><ol><li><p>connect 预配器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">provisioner &quot;file&quot; &#123;</span><br><span class="line">  source      = &quot;conf/myapp.conf&quot;</span><br><span class="line">  destination = &quot;/etc/myapp.conf&quot;</span><br><span class="line"></span><br><span class="line">  connection &#123;</span><br><span class="line">    type     = &quot;ssh&quot;</span><br><span class="line">    user     = &quot;root&quot;</span><br><span class="line">    password = &quot;$&#123;var.root_password&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Copies the file as the Administrator user using WinRM</span><br><span class="line">provisioner &quot;file&quot; &#123;</span><br><span class="line">  source      = &quot;conf/myapp.conf&quot;</span><br><span class="line">  destination = &quot;C:/App/myapp.conf&quot;</span><br><span class="line">  // connection块来覆盖这些默认值</span><br><span class="line">  connection &#123;</span><br><span class="line">    type     = &quot;winrm&quot;</span><br><span class="line">    user     = &quot;Administrator&quot;</span><br><span class="line">    password = &quot;$&#123;var.admin_password&#125;&quot;</span><br><span class="line">    host = &quot;192.168.0.1&quot;</span><br><span class="line">    timeout = &quot;30s&quot;</span><br><span class="line">    script_path = &quot;path&quot; //用于复制脚本的路径，用于远程执行。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>没有资源的预配器<br>null_resource被视为普通资源</p></li><li><p>chef<br>chef预配安装，配置和运行上的远程资源的厨师客户端<br>该chef预配有特定的连接类型的一些先决条件：</p></li></ol><ul><li>对于ssh类型连接，cURL必须在远程主机上可用。</li><li>对于winrm连接，PowerShell 2.0必须在远程主机上可用。</li></ul><ol start="4"><li><p>文件预配器<br>该file预配用于从执行Terraform到新创建的资源的机器复制文件或目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;web&quot; &#123;</span><br><span class="line">  # ...</span><br><span class="line"></span><br><span class="line">  # Copies the myapp.conf file to /etc/myapp.conf</span><br><span class="line">  provisioner &quot;file&quot; &#123;</span><br><span class="line">    source      = &quot;conf/myapp.conf&quot;</span><br><span class="line">    destination = &quot;/etc/myapp.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>habitat<br>habitat预配装的Habitat管理者和配置加载服务<br>先决条件：<br>对于ssh类型连接，我们假设在远程主机上有一些工具可用：</p></li></ol><ul><li>curl</li><li>tee</li><li>setsid- 仅在使用unmanaged服务类型时</li></ul><ol start="5"><li>local-exec<br>在local-exec创建资源后供应者调用本地可执行文件。</li></ol><ol start="6"><li>Puppet 预配器<br>先决条件：</li></ol><p>对于ssh类型连接，cURL必须在远程主机上可用。<br>对于winrm连接，PowerShell 2.0必须在远程主机上可用。</p><ol start="7"><li>remote-exec<br>remote-exec供应方的远程资源调用的脚本在创建后。</li><li>salt-masterless<br>salt-masterlessTerraform供应方规定的机器使用内置Terraform salt的状态，而无需连接到salt-masterless</li></ol><h3 id="五、模块"><a href="#五、模块" class="headerlink" title="五、模块"></a>五、模块</h3><ol><li>发布来源<br><a href="https://registry.terraform.io/" target="_blank" rel="noopener">terraform registry</a> 上发布模块公共的模块</li></ol><p><a href="https://www.terraform.io/docs/registry/api.html" target="_blank" rel="noopener">自己实现api</a></p><ol start="2"><li>来源类型<br>在module块中source参数告诉terraform从哪里找到子module<br>有如下方式：</li></ol><ul><li>本地路径</li><li>terraform registry</li><li>github</li><li>bitbucket</li><li>公共git仓库</li><li>http urls</li><li>s3 bucket</li><li>gcs bucket</li></ul><ol start="3"><li>模块组成<br>依赖性倒置<br>有条件地创建对象<br>多云抽象<br>仅数据模块</li></ol><p>核心: </p><ol><li>定义</li></ol><ul><li>main.tf 资源定义值文件</li><li>outputs.tf 输出变量,用于其他模块引用</li><li>aliables.tf 输入变量,用于获取外部变量.</li></ul><ol start="2"><li>引用<br>使用外部module</li></ol><h3 id="六、后端"><a href="#六、后端" class="headerlink" title="六、后端"></a>六、后端</h3><p>后端的作用,可以团队工作、保持磁盘上的敏感信息和远程操作。<br>后端初始化配置好后端使用配置进行<strong><em>terraform init</em></strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend &quot;consul&quot; &#123;</span><br><span class="line">    address = &quot;demo.consul.io&quot;</span><br><span class="line">    scheme  = &quot;https&quot;</span><br><span class="line">    path    = &quot;example_app/terraform_state&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端负责存储状态并提供状态锁定API<br>手动推拉从远程状态中检索状态</p><h3 id="七、插件"><a href="#七、插件" class="headerlink" title="七、插件"></a>七、插件</h3><p>Terraform供应商插件提供。gong’kai特定服务和配置程序。<br>安装插件将插件放入<strong>%APPDATA%\terraform.d\plugins</strong>目录下。<br>开发插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;github.com/hashicorp/terraform/plugin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    plugin.Serve(new(MyPlugin)) //实现Provider或Provisioner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>provider插件<br>插件提供者负责资源的生命周期：创建、读取、更新和删除。<br>提供插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/hashicorp/terraform/helper/schema&quot;</span><br><span class="line">&quot;github.com/hashicorp/terraform/terraform&quot;</span><br><span class="line">)</span><br><span class="line">//这是提供程序本身的配置架构  </span><br><span class="line">func Provider() terraform.ResourceProvider &#123;</span><br><span class="line">return &amp;schema.Provider&#123;</span><br><span class="line">DataSourcesMap: map[string]*schema.Resource&#123;</span><br><span class="line">&quot;template_file&quot;:             dataSourceFile(),</span><br><span class="line">&quot;template_cloudinit_config&quot;: dataSourceCloudinitConfig(),</span><br><span class="line">&#125;,</span><br><span class="line">ResourcesMap: map[string]*schema.Resource&#123;</span><br><span class="line">&quot;template_file&quot;: schema.DataSourceResourceShim(</span><br><span class="line">&quot;template_file&quot;,</span><br><span class="line">dataSourceFile(),</span><br><span class="line">),</span><br><span class="line">&quot;template_cloudinit_config&quot;: schema.DataSourceResourceShim(</span><br><span class="line">&quot;template_cloudinit_config&quot;,</span><br><span class="line">dataSourceCloudinitConfig(),</span><br><span class="line">),</span><br><span class="line">&quot;template_dir&quot;: resourceDir(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分状态改变操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func resourceUpdate(d *schema.ResourceData, meta interface&#123;&#125;) error &#123;</span><br><span class="line">    // Enable partial state mode</span><br><span class="line">    d.Partial(true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if d.HasChange(&quot;tags&quot;) &#123;</span><br><span class="line">    // 如果tags属性值变化了进行其他操作</span><br><span class="line">        // If an error occurs, return with an error,</span><br><span class="line">        // we didn&apos;t finish updating</span><br><span class="line">        if err := updateTags(d, meta); err != nil &#123;</span><br><span class="line">            return err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        d.SetPartial(&quot;tags&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if d.HasChange(&quot;name&quot;) &#123;</span><br><span class="line">        if err := updateName(d, meta); err != nil &#123;</span><br><span class="line">            return err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        d.SetPartial(&quot;name&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // We succeeded, disable partial mode</span><br><span class="line">    d.Partial(false)</span><br><span class="line"></span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、内幕"><a href="#八、内幕" class="headerlink" title="八、内幕"></a>八、内幕</h3><p><strong>调试terraform设置日志打印</strong><br>环境变量中添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打印等级 TRACE，DEBUG，INFO，WARN或ERROR</span><br><span class="line">TF_LOG=TRACE</span><br><span class="line">TF_LOG_PATH=path</span><br></pre></td></tr></table></figure><p>Terraform崩溃（Go运行时中的“恐慌”），它会保存一个日志文件，其中包含来自会话的调试日志以及恐慌消息和回溯到crash.log</p><p><strong>资源图</strong></p><p> 所有资源组合编排实际在terraform中，组成了一个复杂的资源依赖图，资源图由资源节点、提供者配置节点和资源元节点组成，所以并发构建其实是对图中未依赖的资源节点和依赖的执行节点进行并发创建. terraform是支持并发构建的。让我默认看看terraform资源图创建与遍历原理，来理解terraform并发创建基础设施。<br>图形节点：</p><ol><li>资源节点  - 表示单个资源 count设置了元参数，那么每个计数将有一个资源节点 （更改中的资源的配置，差异，状态等附加到此节点。）</li><li>提供者配置节点 -表示完全配置提供者的时机，将提供者配置提供给提供者的实际，如aws安全认证<br>3.资源源节点 -表示一组资源，但不代表任何操作<br>构建图形:</li><li>根据配置添加资源节点。如果存在diff（计划）或状态，则将该元数据附加到每个资源节点。</li><li>如果资源有任何已定义的资源，则映射到资源。必须在创建所有资源节点后执行此操作，以便具有相同配置程序类型的资源可以共享配置程序实现。</li><li>depends_on元参数的显式依赖关系用于创建资源边缘。</li><li>如果存在状态，则将任何“孤立”资源添加到图形中。孤立资源是配置中不再存在但存在于状态文件中的任何资源。孤儿永远不会有任何与之关联的配置，因为状态文件不存储配置。</li><li>资源映射到提供者。为这些提供程序创建提供程序配置节点，并创建边缘，以便资源依赖于正在配置的各自提供程序。</li><li>在资源和提供程序配置中解析插值以确定依赖性。对资源属性的引用变为从具有内插的资源到被引用资源的依赖性。</li><li>创建根节点。根节点指向所有资源并且已创建，因此依赖关系图中只有一个根。遍历图形时，将忽略根节点。</li><li>如果存在diff，则遍历所有资源节点并查找正在销毁的资源。这些资源节点分为两个：一个销毁资源的节点和另一个创建资源的节点（如果正在重新创建）。必须拆分节点的原因是因为销毁顺序通常与创建顺序不同，因此它们不能由单个图节点表示。</li><li>验证图表没有周期并且具有单个根节点。<br>遍历图形：<br>遍历图形，采用一个标准的深度优先遍历方式，图的遍历是并行的，一旦遍历所有依赖关系，就运行一个节点。默认图表同时操作10个节点，也可以使用-parallelism参数更改并发数</li></ol><p><strong>资源的生命周期</strong></p><ol><li>ValidateResource被称为对资源配置进行高级结构验证。</li><li>Diff使用当前状态和配置调用。</li><li>Apply用当前状态和差异调用。</li><li>如果资源刚刚创建且之前不存在，并且应用成功而没有错误，则按顺序执行配置程序。如果任何供应商错误，资源被标记为 污染，以便在下次申请时将其销毁。</li></ol><p><strong>资源地址</strong><br>一个资源地址是引用了一个更大的基础设施中的特定资源的字符串。</p><ol><li><p>模块路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.A.module.B.module.C...</span><br></pre></td></tr></table></figure></li><li><p>资源规格</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource_type.resource_name[N]</span><br></pre></td></tr></table></figure></li></ol><p><strong>json输出格式</strong><br>状态表示、计划表示、值表示形式、配置表示和更改表示都可以使用json的方式查看。</p><p><strong>远程服务发现</strong><br><strong>插件</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.matosiki.site/image/terrafrom/terraform_arch.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.matosiki.site/blog/java/java的字符串转枚举类型/</id>
    <published>2020-06-04T02:02:07.179Z</published>
    <updated>2020-06-04T02:06:20.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="假定一个美酒类型"><a href="#假定一个美酒类型" class="headerlink" title="假定一个美酒类型"></a>假定一个美酒类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PizzaStatusEnum readyStatus = PizzaStatusEnum.READY;</span><br></pre></td></tr></table></figure><h1 id="使用-valueOf-“”-方法"><a href="#使用-valueOf-“”-方法" class="headerlink" title="使用 valueOf(“”)方法"></a>使用 <strong>valueOf(“”)</strong>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenConvertedIntoEnum_thenGetsConvertedCorrectly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    String pizzaEnumValue = <span class="string">"READY"</span>;</span><br><span class="line">    PizzaStatusEnum pizzaStatusEnum</span><br><span class="line">      = PizzaStatusEnum.valueOf(pizzaEnumValue);</span><br><span class="line">    assertTrue(pizzaStatusEnum == PizzaStatusEnum.READY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意-如果参数不对-会抛出非法参数异常"><a href="#注意-如果参数不对-会抛出非法参数异常" class="headerlink" title="注意: 如果参数不对,会抛出非法参数异常"></a>注意: 如果参数不对,会抛出非法参数异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = IllegalArgumentException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenConvertedIntoEnum_thenThrowsException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String pizzaEnumValue = <span class="string">"invalid"</span>;</span><br><span class="line">    PizzaStatusEnum pizzaStatusEnum = PizzaStatusEnum.valueOf(pizzaEnumValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;假定一个美酒类型&quot;&gt;&lt;a href=&quot;#假定一个美酒类型&quot; class=&quot;headerlink&quot; title=&quot;假定一个美酒类型&quot;&gt;&lt;/a&gt;假定一个美酒类型&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/jvm%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://www.matosiki.site/blog/java/jvm工作原理/</id>
    <published>2020-06-04T02:02:07.179Z</published>
    <updated>2020-06-04T02:06:15.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-JVM的生命周期"><a href="#一、-JVM的生命周期" class="headerlink" title="一、    JVM的生命周期"></a>一、    JVM的生命周期</h1><ol><li>JVM实例对应了一个独立运行的java程序它是进程级别<br>a)    启动。启动一个Java程序时，一个JVM实例就产生了，任何一个拥有public static void main(String[] args)函数的class都可以作为JVM实例运行的起点<br>b)    运行。main()作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：守护线程和非守护线程，main()属于非守护线程，守护线程通常由JVM<br>自己使用，java程序也可以标明自己创建的线程是守护线程<br>c)    消亡。当程序中的所有非守护线程都终止时，JVM才退出；若安全管理器允许，程序也可以使用Runtime类或者System.exit()来退出</li><li>JVM执行引擎实例则对应了属于用户运行程序的线程它是线程级别的</li></ol><h1 id="二、-JVM的体系结构"><a href="#二、-JVM的体系结构" class="headerlink" title="二、    JVM的体系结构"></a>二、    JVM的体系结构</h1><p><img src="http://img.matosiki.site/image/jvm/jvm-struct.png" alt="jvm体系结构"></p><ol><li>类装载器（ClassLoader）（用来装载.class文件）</li><li>执行引擎（执行字节码，或者执行本地方法）</li><li>运行时数据区（方法区、堆、java栈、PC寄存器、本地方法栈）</li></ol><h1 id="三、-JVM类加载器"><a href="#三、-JVM类加载器" class="headerlink" title="三、    JVM类加载器"></a>三、    JVM类加载器</h1><p><strong>JVM整个类加载过程的步骤：</strong></p><ol><li><strong>装载</strong><br>装载过程负责找到二进制字节码并加载至JVM中，JVM通过类名、类所在的包名通过ClassLoader来完成类的加载，<br>同样，也采用以上三个元素来标识一个被加载了的类：类名+包名+ClassLoader实例ID。</li><li><strong>链接</strong><br>链接过程负责对二进制字节码的格式进行校验、初始化装载类中的静态变量以及解析类中调用的接口、类。<br>完成校验后，JVM初始化类中的静态变量，并将其值赋为默认值。<br>最后对类中的所有属性、方法进行验证，以确保其需要调用的属性、方法存在，以及具备应的权限（例如public、private域权限等），<br>会造成NoSuchMethodError、NoSuchFieldError等错误信息。</li><li><strong>初始化</strong><br>初始化过程即为执行类中的静态初始化代码、构造器代码以及静态属性的初始化，在四种情况下初始化过程会被触发执行：<br>调用了new；<br>反射调用了类中的方法；<br>子类调用了初始化；<br>JVM启动过程中指定的初始化类。</li></ol><p><strong>VM类加载顺序：</strong><br><img src="http://img.matosiki.site/image/jvm/jvm-loader.png" alt="jvm加载顺序"><br><strong>JVM两种类装载器包括：</strong>启动类装载器和用户自定义类装载器。<br>启动类装载器是JVM实现的一部分；<br>用户自定义类装载器则是Java程序的一部分，必须是ClassLoader类的子类。<br><strong>JVM装载顺序：</strong><br>    Jvm启动时，由Bootstrap向User-Defined方向加载类；<br>    应用进行ClassLoader时，由User-Defined向Bootstrap方向查找并加载类；</p><ol><li><strong>Bootstrap ClassLoaderzh</strong><br>这是JVM的根ClassLoader，它是用C++实现的，JVM启动时初始化此ClassLoader，并由此ClassLoader完成$JAVA_HOME中jre/lib/rt.jar（Sun JDK的实现）<br>中所有class文件的加载，这个jar中包含了java规范定义的所有接口以及实现。</li><li><strong>Extension ClassLoader</strong><br>JVM用此classloader来加载扩展功能的一些jar包。</li><li><strong>System ClassLoader</strong><br>JVM用此classloader来加载启动参数中指定的Classpath中的jar包以及目录，在Sun JDK中ClassLoader对应的类名为AppClassLoader。</li><li><strong>User-Defined ClassLoader</strong><br>User-DefinedClassLoader是Java开发人员继承ClassLoader抽象类自行实现的ClassLoader，基于自定义的ClassLoader可用于加载非Classpath中的jar以及目录。</li></ol><p><strong>ClassLoader抽象类的几个关键方法：</strong><br>（1）    loadClass<br>  此方法负责加载指定名字的类，ClassLoader的实现方法为先从已经加载的类中寻找，如没有则继续从parent ClassLoader中寻找，<br>如仍然没找到，则从System ClassLoader中寻找，最后再调用findClass方法来寻找，如要改变类的加载顺序，则可覆盖此方法<br>（2）    findLoadedClass<br>此方法负责从当前ClassLoader实例对象的缓存中寻找已加载的类，调用的为native的方法。<br>（3）    findClass<br>此方法直接抛出ClassNotFoundException，因此需要通过覆盖loadClass或此方法来以自定义的方式加载相应的类。<br>（4）    findSystemClass<br>此方法负责从System ClassLoader中寻找类，如未找到，则继续从Bootstrap ClassLoader中寻找，如仍然为找到，则返回null。<br>（5）    defineClass<br>此方法负责将二进制的字节码转换为Class对象<br>（6）    resolveClass<br>此方法负责完成Class对象的链接，如已链接过，则会直接返回。</p><h1 id="四、-JVM执行引擎"><a href="#四、-JVM执行引擎" class="headerlink" title="四、    JVM执行引擎"></a>四、    JVM执行引擎</h1><p><strong>在执行方法时JVM提供了四种指令来执行：</strong><br>（1）invokestatic：调用类的static方法<br>（2）invokevirtual：调用对象实例的方法<br>（3）invokeinterface：将属性定义为接口来进行调用<br>（4）invokespecial：JVM对于初始化对象（Java构造器的方法为：<init>）以及调用对象实例中的私有方法时。</init></p><p><strong>主要的执行技术有:</strong><br>解释，即时编译，自适应优化、芯片级直接执行<br>（1）解释属于第一代JVM，<br>（2）即时编译JIT属于第二代JVM，<br>（3）自适应优化（目前Sun的HotspotJVM采用这种技术）则吸取第一代JVM和第二代<br>JVM的经验，采用两者结合的方式<br>  开始对所有的代码都采取解释执行的方式，并监视代码执行情况，然后对那些经常调用的方法启动一个后台线程，将其编译为本地代码，<br>并进行优化。若方法不再频繁使用，则取消编译过的代码，仍对其进行解释执行。</p><h1 id="五、-JVM运行时数据区"><a href="#五、-JVM运行时数据区" class="headerlink" title="五、    JVM运行时数据区"></a>五、    JVM运行时数据区</h1><p><img src="http://img.matosiki.site/image/jvm/jvm-memory.png" alt=""><br><strong>第一块：PC寄存器</strong><br>PC寄存器是用于存储每个线程下一步将执行的JVM指令，如该方法为native的，则PC寄存器中不存储任何信息。<br><strong>第二块：JVM栈</strong><br>JVM栈是线程私有的，每个线程创建的同时都会创建JVM栈，JVM栈中存放的为当前线程中局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double）、部分的返回结果以及Stack Frame，非基本类型的对象在JVM栈上仅存放一个指向堆上的地址<br><strong>第三块：堆（Heap）</strong><br>它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配，Heap中的对象的内存需要等待GC进行回收。<br><img src="http://img.matosiki.site/image/jvm/jvm-heap.png" alt=""><br>（1）    堆是JVM中所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也导致了new对象的开销是比较大的<br>（2）    Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间TLAB（Thread Local Allocation Buffer），其大小由JVM根据运行的情况计算而得，在TLAB上分配对象时不需要加锁，因此JVM在给线程的对象分配内存时会尽量的在TLAB上分配，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配<br>（3）    TLAB仅作用于新生代的Eden Space，因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效。<br><strong>第四块：方法区域（Method Area）</strong><br>（1）在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。<br>（2）方法区域存放了所加载的类的信息（名称、修饰符等）、类中的静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class<br>  对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，<br>当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。<br><strong>第五块：运行时常量池（Runtime Constant Pool）</strong><br>存放的为类中的固定的常量信息、方法和Field的引用信息等，其空间从方法区域中分配。<br><strong>第六块：本地方法堆栈（Native Method Stacks）</strong><br>JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法调用的状态。</p><h1 id="六、-JVM垃圾回收"><a href="#六、-JVM垃圾回收" class="headerlink" title="六、    JVM垃圾回收"></a>六、    JVM垃圾回收</h1><p><strong>GC的基本原理：</strong> 将内存中不再被使用的对象进行回收，GC中用于回收的方法称为收集器，由于GC需要消耗一些资源和时间，Java在对对象的生命周期特征进行分析后，按照新生代、旧生代的方式来对对象进行收集，以尽可能的缩短GC对应用造成的暂停<br>（1）对新生代的对象的收集称为minor GC；<br>（2）对旧生代的对象的收集称为Full GC；<br>（3）程序中主动调用System.gc()强制执行的GC为Full GC。<br><strong>不同的对象引用类型， GC会采用不同的方法进行回收，JVM对象的引用分为了四种类型：</strong><br>（1）强引用：默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）<br>（2）软引用：软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）<br>（3）弱引用：在GC时一定会被GC回收<br>（4）虚引用：由于虚引用只是用来得知对象是否被GC</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、-JVM的生命周期&quot;&gt;&lt;a href=&quot;#一、-JVM的生命周期&quot; class=&quot;headerlink&quot; title=&quot;一、    JVM的生命周期&quot;&gt;&lt;/a&gt;一、    JVM的生命周期&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;JVM实例对应了一个独立运行的java程序它
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>http://www.matosiki.site/blog/java/java统计字符串中字符出现的次数/</id>
    <published>2020-06-04T02:02:07.179Z</published>
    <updated>2020-06-04T02:06:12.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用java原生方式for循环"><a href="#1-使用java原生方式for循环" class="headerlink" title="1. 使用java原生方式for循环"></a>1. 使用java原生方式for循环</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String someString = <span class="string">"elephant"</span>;</span><br><span class="line"><span class="keyword">char</span> someChar = <span class="string">'e'</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; someString.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (someString.charAt(i) == someChar) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br></pre></td></tr></table></figure><h1 id="2-使用java原生递归调用"><a href="#2-使用java原生递归调用" class="headerlink" title="2. 使用java原生递归调用"></a>2. 使用java原生递归调用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countOccurences</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  String someString, <span class="keyword">char</span> searchedChar, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= someString.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">int</span> count = someString.charAt(index) == searchedChar ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> count + countOccurences(</span><br><span class="line">      someString, searchedChar, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用正则表达式"><a href="#3-使用正则表达式" class="headerlink" title="3. 使用正则表达式"></a>3. 使用正则表达式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">"[^e]*e"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">"elephant"</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br></pre></td></tr></table></figure><h1 id="4-使用java8"><a href="#4-使用java8" class="headerlink" title="4.使用java8"></a>4.使用java8</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String someString = <span class="string">"elephant"</span>;</span><br><span class="line"><span class="keyword">long</span> count = someString.chars().filter(ch -&gt; ch == <span class="string">'e'</span>).count();</span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> count2 = someString.codePoints().filter(ch -&gt; ch == <span class="string">'e'</span>).count();</span><br><span class="line">assertEquals(<span class="number">2</span>, count2);</span><br></pre></td></tr></table></figure><hr><h2 id="使用外部jar包"><a href="#使用外部jar包" class="headerlink" title="使用外部jar包"></a>使用外部jar包</h2><h1 id="5-使用lang包"><a href="#5-使用lang包" class="headerlink" title="5. 使用lang包"></a>5. 使用lang包</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = StringUtils.countMatches(<span class="string">"elephant"</span>, <span class="string">"e"</span>);</span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br></pre></td></tr></table></figure><h1 id="6-使用guava"><a href="#6-使用guava" class="headerlink" title="6. 使用guava"></a>6. 使用guava</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = CharMatcher.is(<span class="string">'e'</span>).countIn(<span class="string">"elephant"</span>);</span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br></pre></td></tr></table></figure><h1 id="7-使用spring-utils"><a href="#7-使用spring-utils" class="headerlink" title="7.使用spring utils"></a>7.使用spring utils</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = StringUtils.countOccurrencesOf(<span class="string">"elephant"</span>, <span class="string">"e"</span>);</span><br><span class="line">assertEquals(<span class="number">2</span>, count);</span><br></pre></td></tr></table></figure><p>总结: 原生方式简单粗暴,也可以使用其他工具类,但使用java8感觉最优雅.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用java原生方式for循环&quot;&gt;&lt;a href=&quot;#1-使用java原生方式for循环&quot; class=&quot;headerlink&quot; title=&quot;1. 使用java原生方式for循环&quot;&gt;&lt;/a&gt;1. 使用java原生方式for循环&lt;/h1&gt;&lt;figure cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/oauth2-0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://www.matosiki.site/blog/java/oauth2-0-深入理解/</id>
    <published>2020-06-04T02:02:07.179Z</published>
    <updated>2020-06-04T02:06:05.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OAuth2-0是什么"><a href="#OAuth2-0是什么" class="headerlink" title="OAuth2.0是什么"></a>OAuth2.0是什么</h3><p>用于REST/APIS的代理授权框架（delegatedauthorizetion framework）,基于令牌token的授权，在无需暴露用户密码的情况下，使应用能够对用户数据有效访问权限，充分解耦认证和授权，实际上是标准的安全架构，支持多种应用场景，服务器端WebApp,浏览器单页面SPA，无线原生App,服务器与服务器之间访问。像仆从钥匙，给应用授权优先的访问权限，代表用户访问用户数据。OAoth是系统之间代理授权协议</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>易实现</li><li>安全，服务端不接触用户密码，服务单更容易集中保护。</li><li>广泛传播被持续采用</li><li>短寿命和封装的token</li><li>资源服务器和授权服务器解耦</li><li>集中授权简化客户端</li><li>HTTP/JSON友好易于请求和传递token</li><li>考虑多种客户端架构场景</li><li>客户可以具有不同的信任级别</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>协议框架太宽泛，造成各种实现的兼容性和互操作性</li><li>与OAuth1.0不兼容</li><li>OAuth 2.0 不是一个认证协议，OAuth2.0本身并不能告诉你任何用户信息</li></ol><h3 id="架构角色"><a href="#架构角色" class="headerlink" title="架构角色"></a>架构角色</h3><p>1.授权服务 Authorization Service<br>客户应用成功认证并获得授权之后，向客户应用颁发访问令牌。</p><p>2.资源服务 Resource Service<br>一个web服务或者web应用，保存用户受保护的数据</p><p>3.客户端应用 Client Application<br>通常是一个浏览器或者手机app，它需要用户受保护的数据</p><p>4.资源拥有者 owner<br>数据拥有者，想把数据分享给他人使用</p><p>客户端应用需要访问资源服务,但是没有认证,此时客户端去授权服务获取认证令牌,拿到令牌后交给资源服务器,资源服务器拿到令牌后也去授权服务比较一次,如果是对的,就认证通过.</p><p><img src="http://img.matosiki.site/image/oauth2.0_simple_arch.png" alt="OAuth2.0简单架构"></p><h3 id="OAuth2-0语术概念"><a href="#OAuth2-0语术概念" class="headerlink" title="OAuth2.0语术概念"></a>OAuth2.0语术概念</h3><p>1.客户凭证 Client Credentials<br>客户的clientId和密码用户认证客户</p><p>2.令牌 Tokens<br>授权服务器在接收到客户请求后颁发的资源服务器<br><strong>令牌类型</strong></p><ul><li>授权码 (Authorization Code Token)  仅用于授权码类型，用于交换获取访问令牌和刷新令牌</li><li>刷新令牌 (Refresh Token) 用于去授权服务器获取一个新的token</li><li>访问令牌 (Access Token) 代表用户直接访问受保护的资源服务器</li><li>Bearer Token 不管谁拿到都可以访问资源</li><li>Proof of Prosession Token   可以校验Client是否对Token有明确的权限</li></ul><p>3.作用域<br>客户请求访问令牌时，有资源拥有者额外指定的细分权限</p><h3 id="应用场景-解决方案"><a href="#应用场景-解决方案" class="headerlink" title="应用场景,解决方案"></a>应用场景,解决方案</h3><h4 id="一、开放间系统授权"><a href="#一、开放间系统授权" class="headerlink" title="一、开放间系统授权"></a>一、开放间系统授权</h4><p>1.社交联合登陆</p><p>2.开放API平台</p><h4 id="二、现代微服务安全"><a href="#二、现代微服务安全" class="headerlink" title="二、现代微服务安全"></a>二、现代微服务安全</h4><p>1.单页面浏览器APP</p><p>2.无线原生APP</p><p>3.服务端WebApp</p><p>4.微服务和原生API调用</p><h4 id="三、企业内部认证授权-IAM-SSO"><a href="#三、企业内部认证授权-IAM-SSO" class="headerlink" title="三、企业内部认证授权(IAM,SSO)"></a>三、企业内部认证授权(IAM,SSO)</h4><h3 id="AOuth-Flow"><a href="#AOuth-Flow" class="headerlink" title="AOuth Flow"></a>AOuth Flow</h3><p>推荐两篇文章</p><p><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6749</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0 - 阮一峰的网络日志</a></p><p><img src="http://img.matosiki.site/image/oauth_protocl_flow.png" alt=""></p><h3 id="客户端的授权模式"><a href="#客户端的授权模式" class="headerlink" title="客户端的授权模式"></a>客户端的授权模式</h3><h4 id="1-授权码模式"><a href="#1-授权码模式" class="headerlink" title="1. 授权码模式"></a>1. 授权码模式</h4><p><img src="http://img.matosiki.site/image/oauth_mode_authorization_code.png" alt=""></p><p><strong>授权步骤</strong></p><ul><li>A.用户访问客户端,客户端重定向到认证服务器.</li><li>B.用户选择授权客户端</li><li>C.如果用户授权,授权服务器重定向到客户端带来的url并附加一个授权码</li><li>D.客户端附带重定向url和授权码后台请求授权服务器申请令牌</li><li>E.授权服务器校对授权码和重定向url,确认无误,向客户端发送访问令牌(Access Token)和刷新令牌(Refresh Token)</li></ul><h5 id="基于spring-security-oauth2-0搭建最简授权码模式服务器"><a href="#基于spring-security-oauth2-0搭建最简授权码模式服务器" class="headerlink" title="基于spring security oauth2.0搭建最简授权码模式服务器"></a>基于spring security oauth2.0搭建最简授权码模式服务器</h5><h6 id="一、-源码"><a href="#一、-源码" class="headerlink" title="一、 源码"></a>一、 源码</h6><p>资源服务器和授权服务器一起案例</p><ol><li><p>引入jar包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- OAuth 2.0 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加授权服务器配置</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//授权服务器配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class OAuth2AuthorizationServer extends</span><br><span class="line">        AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(&quot;clientapp&quot;)</span><br><span class="line">                .secret(&quot;123456&quot;)</span><br><span class="line">                .redirectUris(&quot;http://localhost:9001/callback&quot;)</span><br><span class="line">                // 授权码模式</span><br><span class="line">                .authorizedGrantTypes(&quot;authorization_code&quot;)</span><br><span class="line">                .scopes(&quot;read_userinfo&quot;, &quot;read_contacts&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加资源服务器配置</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//资源服务配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableResourceServer</span><br><span class="line">public class OAuth2ResourceServer extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                .antMatchers(&quot;/api/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置添加授权用户</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Spring Security Setting</span><br><span class="line">security.user.name=user1</span><br><span class="line">security.user.password=passwd1</span><br></pre></td></tr></table></figure><ol start="5"><li>添加资源服务器api入口</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">// 资源API</span><br><span class="line">    @RequestMapping(&quot;/api/userinfo&quot;)</span><br><span class="line">    public ResponseEntity&lt;UserInfo&gt; getUserInfo() &#123;</span><br><span class="line">        User user = (User) SecurityContextHolder.getContext()</span><br><span class="line">                .getAuthentication().getPrincipal();</span><br><span class="line">        String email = user.getUsername() + &quot;@hello.com&quot;;</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo = new UserInfo();</span><br><span class="line">        userInfo.setName(user.getUsername());</span><br><span class="line">        userInfo.setEmail(email);</span><br><span class="line"></span><br><span class="line">        return ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>启动服务器</li></ol><h6 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h6><ol><li>获取授权码</li></ol><p>请求：<br>打开浏览器 输入地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=code&amp;scope=read_userinfo</span><br></pre></td></tr></table></figure><p>输入用户名和密码，选择授权。</p><p>请求：<br>页面会跳转一个callback地址加授权码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:9001/callback?code=4PFZ2w</span><br></pre></td></tr></table></figure></p><ol start="2"><li>获取令牌</li></ol><p>请求：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST --user clientapp:123456 http://localhost:8080/oauth/token -H</span><br><span class="line">&quot;content-type: application/x-www-form-urlencoded&quot; -d</span><br><span class="line">&quot;code=4PFZ2w&amp;grant_type=authorization_code&amp;redirect_uri=http%3A%2F%2Flocalh</span><br><span class="line">ost%3A9001%2Fcallback&amp;scope=read_userinfo&quot;</span><br></pre></td></tr></table></figure></p><p>响应：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"access_token"</span>:<span class="string">"44a572ca-3a05-40ba-a557-35955179e143"</span>,<span class="attr">"token_type"</span>:<span class="string">"bearer"</span>,<span class="attr">"expires_in"</span>:<span class="number">43199</span>,<span class="attr">"scope"</span>:<span class="string">"read_userinfo"</span>&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>访问资源，调用API<br>请求：</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/api/userinfo -H &quot;authorization: Bearer 44a572ca-3a05-40ba-a557-35955179e143&quot;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;user1&quot;,&quot;email&quot;:&quot;user1@hello.com&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>通过前端渠道客户获取授权码</li><li>通过后端渠道,客户使用authorization code 交换access token 或refresh token</li><li>假定资源拥有者和客户在不同的设备上</li><li>最安全的流程,因为令牌不会传递经过User-Agent</li></ul><p>总结: <strong>授权码模式本质上是客户端通过用户名密码发起获取授权码请求,服务端根据回调地址返回授权码,客户端根据授权码访问资源服务器,资源服务器根据授权码拿到授权服务器给的access token返回给客户端,客户端就可以带着这个access token访问资源服务器上的有效资源.</strong></p><h4 id="2-简化模式"><a href="#2-简化模式" class="headerlink" title="2. 简化模式"></a>2. 简化模式</h4><p><img src="http://img.matosiki.site/image/oauth_mode_implit.png" alt=""></p><p><strong>授权步骤</strong></p><ul><li>客户端重定向用户到认证服务器</li><li>用户选择是否授权给客户端</li><li>用户授权,授权服务器根据客户端请求参数uri重定向到客户端,并将token放入url的hash部分</li><li>资源服务返回一个页面,可以获取hash值</li><li>浏览器执行脚本获取令牌</li><li>浏览器叫令牌发送给客户端</li></ul><h5 id="基于spring-security-oauth2-0搭建简化模式服务器"><a href="#基于spring-security-oauth2-0搭建简化模式服务器" class="headerlink" title="基于spring security oauth2.0搭建简化模式服务器"></a>基于spring security oauth2.0搭建简化模式服务器</h5><h6 id="一、-源码-1"><a href="#一、-源码-1" class="headerlink" title="一、 源码"></a>一、 源码</h6><p>资源服务器和授权服务器一起案例</p><ol><li>引入spring security 和 oauth jar包</li><li>授权服务器配置</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//简化服务器配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class OAuth2AuthorizationServer extends</span><br><span class="line">        AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(&quot;clientapp&quot;)</span><br><span class="line">                .secret(&quot;123456&quot;)</span><br><span class="line">                .redirectUris(&quot;http://localhost:9001/callback&quot;)</span><br><span class="line">                // 授权码模式</span><br><span class="line">                //.authorizedGrantTypes(&quot;authorization_code&quot;)</span><br><span class="line">                // 简化模式</span><br><span class="line">                .authorizedGrantTypes(&quot;implicit&quot;)</span><br><span class="line">                .accessTokenValiditySeconds(120)</span><br><span class="line">                .scopes(&quot;read_userinfo&quot;, &quot;read_contacts&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h6><ol><li>获取令牌<br>访问浏览器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=token&amp;scope=read_userinfo&amp;state=abc</span><br></pre></td></tr></table></figure></li></ol><p>输入配置的用户和密码，选择授权。<br>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:9001/callback#access_token=d678754d-752c-46cc-9a9b-d59ae830cddb&amp;token_type=bearer&amp;state=abc&amp;expires_in=119</span><br></pre></td></tr></table></figure><ol start="2"><li>访问资源，调用API</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/api/userinfo -H &quot;authorization: Bearer d678754d-752c-46cc-9a9b-d59ae830cddb&quot;</span><br></pre></td></tr></table></figure><p>响应：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;user1&quot;,&quot;email&quot;:&quot;user1@hello.com&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong></p><ul><li>适用于公开的浏览器单页面应用</li><li>Access Token 直接从授权服务器返回</li><li>不支持Refresh Token</li><li>假定资源拥有者和客户在同一设备上</li><li>最容易受安全攻击</li></ul><p>总结：<strong>简化模式，就是没有授权码的授权模式，去掉了授权码这个步骤。</strong></p><h4 id="3-密码模式-Resource-Owner-Password-Credential-Grant"><a href="#3-密码模式-Resource-Owner-Password-Credential-Grant" class="headerlink" title="3. 密码模式 Resource Owner Password Credential Grant"></a>3. 密码模式 Resource Owner Password Credential Grant</h4><p><img src="http://img.matosiki.site/image/oauth_mode_password_credential.png" alt=""></p><p><strong>授权步骤</strong></p><ul><li>用户向客户端提供用户名和密码</li><li>客户端将用户名和密码发送给认证服务器去认证授权</li><li>认证服务器验证无误，返回给客户端令牌</li></ul><h5 id="基于spring-security-oauth2-0搭建密码模式服务器"><a href="#基于spring-security-oauth2-0搭建密码模式服务器" class="headerlink" title="基于spring security oauth2.0搭建密码模式服务器"></a>基于spring security oauth2.0搭建密码模式服务器</h5><h6 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h6><p>授权服务器配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 授权服务器配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class OAuth2AuthorizationServer extends</span><br><span class="line">        AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">// 用户认证</span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">            .withClient(&quot;clientapp&quot;)</span><br><span class="line">            .secret(&quot;123456&quot;)</span><br><span class="line">            // 密码模式</span><br><span class="line">            .authorizedGrantTypes(&quot;password&quot;)</span><br><span class="line">            .scopes(&quot;read_userinfo&quot;, &quot;read_contacts&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="一、操作"><a href="#一、操作" class="headerlink" title="一、操作"></a>一、操作</h6><ol><li>获取令牌</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST --user clientapp:123456 http://localhost:8080/oauth/token -H &quot;accept: application/json&quot; -H &quot;content-type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=password&amp;username=user1&amp;password=passwd1&amp;scope=read_userinfo&quot;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;access_token&quot;:&quot;9247e26e-b9d7-488b-88b0-25fb046ac7ce&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:43163,&quot;scope&quot;:&quot;read_userinfo&quot;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>访问资源，调用API</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/api/userinfo -H &quot;authorization: Bearer 9247e26e-b9d7-488b-88b0-25fb046ac7ce&quot;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;user1&quot;,&quot;email&quot;:&quot;user1@hello.com&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong></p><ul><li>使用用户名密码登录的应用,比如桌面应用</li><li>使用用户名/密码作为授权方式从授权服务器上获取access token</li><li>一般不支持refresh token</li><li>假定资源拥有者和公开客户在相同设备上</li></ul><p>总结：<strong>密码授权模式，是对客户端极度信任的情况下，将用户名和密码交给客户端，客户端去授权服务器获取令牌。</strong></p><h4 id="4-客户端模式"><a href="#4-客户端模式" class="headerlink" title="4. 客户端模式"></a>4. 客户端模式</h4><p><img src="http://img.matosiki.site/image/oauth_mode_client_credential.png" alt=""></p><p><strong>授权步骤</strong></p><ul><li>客户端直接向授权服务器发起授权认证，获取令牌</li><li>授权服务器校验通过，颁发令牌</li></ul><h5 id="基于spring-security-oauth2-0搭建客户端模式服务器"><a href="#基于spring-security-oauth2-0搭建客户端模式服务器" class="headerlink" title="基于spring security oauth2.0搭建客户端模式服务器"></a>基于spring security oauth2.0搭建客户端模式服务器</h5><h6 id="一、代码-1"><a href="#一、代码-1" class="headerlink" title="一、代码"></a>一、代码</h6><p>授权服务器配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 授权服务器配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class OAuth2AuthorizationServer extends</span><br><span class="line">        AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">            .withClient(&quot;clientdevops&quot;)</span><br><span class="line">            // 密码模式</span><br><span class="line">            .secret(&quot;123456&quot;)</span><br><span class="line">            .authorizedGrantTypes(&quot;client_credentials&quot;)</span><br><span class="line">            .scopes(&quot;devops&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="二、操作-1"><a href="#二、操作-1" class="headerlink" title="二、操作"></a>二、操作</h6><ol><li>获取令牌</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:8080/oauth/token&quot; --user clientdevops:123456 -d</span><br><span class="line">&quot;grant_type=client_credentials&amp;scope=devops&quot;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;access_token&quot;:&quot;ab5e2936-7463-456b-9ded-aac79d9311e1&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:43199,&quot;scope&quot;:&quot;devops&quot;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>访问资源，调用API</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/api/userinfo -H &quot;authorization: Bearer ab5e2936-7463-456b-9ded-aac79d9311e1&quot;</span><br></pre></td></tr></table></figure><p>响应：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;user1&quot;,&quot;email&quot;:&quot;user1@hello.com&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong></p><ul><li>适用于服务间通信,机器代表用户或者它自己</li><li>只有后端渠道,使用客户凭证获取一个access token</li><li>因为客户凭证可以使用对称或者非对称加密,该方式支持共享密码或者证书</li></ul><p><strong>刷新令牌</strong></p><p><img src="http://img.matosiki.site/image/oauth_mode_refresh_token.png" alt=""></p><h6 id="一、代码-2"><a href="#一、代码-2" class="headerlink" title="一、代码"></a>一、代码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//授权服务器配置</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class OAuth2AuthorizationServer extends</span><br><span class="line">        AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(&quot;clientapp&quot;)</span><br><span class="line">                .secret(&quot;123456&quot;)</span><br><span class="line">                .redirectUris(&quot;http://localhost:9001/callback&quot;)</span><br><span class="line">                // 密码模式</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;refresh_token&quot;)</span><br><span class="line">                .accessTokenValiditySeconds(120)</span><br><span class="line">                .refreshTokenValiditySeconds(60)</span><br><span class="line">                .scopes(&quot;read_userinfo&quot;, &quot;read_contacts&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager);</span><br><span class="line">        endpoints.userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true) //启用方法级的权限认证</span><br><span class="line">public class SecurityConfiguration extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    protected UserDetailsService userDetailsService() &#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(&quot;user1&quot;).password(&quot;passwd1&quot;).authorities(&quot;USER&quot;).build());</span><br><span class="line">        manager.createUser(User.withUsername(&quot;root&quot;).password(&quot;root&quot;).authorities(&quot;USER&quot;).build());</span><br><span class="line">        return manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class="line">        return super.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="二、操作-2"><a href="#二、操作-2" class="headerlink" title="二、操作"></a>二、操作</h6><p>获取令牌<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X POST --user clientapp:123456 http://localhost:8080/oauth/token -H &quot;accept: application/json&quot; -H &quot;content-type: application/x-www-form-urlencoded&quot; -d &quot;grant_type=refresh_token&amp;refresh_token=dda1413c-86e8-4612-8e13-e9044e530c66&quot;</span><br></pre></td></tr></table></figure></p><p>响应：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">Cache-Control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Expires: 0</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-Application-Context: application</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Fri, 12 Jul 2019 07:43:15 GMT</span><br><span class="line"></span><br><span class="line">&#123;&quot;access_token&quot;:&quot;052f2239-6231-4537-bc93-33fce4c58d0c&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;refresh_token&quot;:&quot;dda1413c-86e8-4612-8e13-e9044e530c66&quot;,&quot;expires_in&quot;:119,&quot;scope&quot;:&quot;read_userinfo&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="认证方式选择"><a href="#认证方式选择" class="headerlink" title="认证方式选择"></a>认证方式选择</h4><p><img src="http://img.matosiki.site/image/auth_mode_select_method.png" alt=""></p><h4 id="授权服务器端点"><a href="#授权服务器端点" class="headerlink" title="授权服务器端点"></a>授权服务器端点</h4><ol><li>Authorize Endpoint (/oauth2/authorize) 认证端点</li><li>Token Endpoint (/oauth2/token) 令牌端点</li><li>Introspection Endpoint (/oauth2/instrospection) 检查端点</li><li>Revocation Endpoint (/aouth2/revoke) 吊销端点</li></ol><h4 id="Spring-Security-OAuth2-0架构"><a href="#Spring-Security-OAuth2-0架构" class="headerlink" title="Spring Security OAuth2.0架构"></a>Spring Security OAuth2.0架构</h4><p><a href="http://terasolunaorg.github.io/guideline/5.3.0.RELEASE/en/Security/OAuth.html" target="_blank" rel="noopener">http://terasolunaorg.github.io/guideline/5.3.0.RELEASE/en/Security/OAuth.html</a></p><p><img src="http://img.matosiki.site/image/OAuth_OAuth2Architecture.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;OAuth2-0是什么&quot;&gt;&lt;a href=&quot;#OAuth2-0是什么&quot; class=&quot;headerlink&quot; title=&quot;OAuth2.0是什么&quot;&gt;&lt;/a&gt;OAuth2.0是什么&lt;/h3&gt;&lt;p&gt;用于REST/APIS的代理授权框架（delegatedauthor
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%B8%AD%E5%B0%86%E5%BC%82%E5%B8%B8%E6%A0%88%E8%B7%9F%E8%B8%AA%E4%BF%A1%E6%81%AF%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://www.matosiki.site/blog/java/java中将异常栈跟踪信息转字符串/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:06:44.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用原生java代码"><a href="#1-使用原生java代码" class="headerlink" title="1. 使用原生java代码"></a>1. 使用原生java代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw);</span><br><span class="line">e.printStackTrace(pw);</span><br></pre></td></tr></table></figure><h1 id="2-使用Common-lang工具在类"><a href="#2-使用Common-lang工具在类" class="headerlink" title="2. 使用Common lang工具在类"></a>2. 使用<strong>Common lang</strong>工具在类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String stacktrace = ExceptionUtils.getStacktrace(e);</span><br></pre></td></tr></table></figure><p>总结 获取跟踪栈异常默认不能用String,在java9中添加了<strong>StackWalking API</strong>支持栈异常跟踪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用原生java代码&quot;&gt;&lt;a href=&quot;#1-使用原生java代码&quot; class=&quot;headerlink&quot; title=&quot;1. 使用原生java代码&quot;&gt;&lt;/a&gt;1. 使用原生java代码&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%BD%BF%E7%94%A8Guava%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://www.matosiki.site/blog/java/java使用Guava进行字符串处理/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:05:45.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java使用Guava进行字符串处理"><a href="#java使用Guava进行字符串处理" class="headerlink" title="java使用Guava进行字符串处理"></a>java使用Guava进行字符串处理</h1><h2 id="从字符串中删除特定的字符"><a href="#从字符串中删除特定的字符" class="headerlink" title="从字符串中删除特定的字符"></a>从字符串中删除特定的字符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenRemoveSpecialCharacters_thenRemoved</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String input = <span class="string">"H*el.lo,&#125;12"</span>;</span><br><span class="line">    CharMatcher matcher = CharMatcher.JAVA_LETTER_OR_DIGIT;</span><br><span class="line">    String result = matcher.retainFrom(input);</span><br><span class="line"> </span><br><span class="line">    assertEquals(<span class="string">"Hello12"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从字符串中删除不是字符串"><a href="#从字符串中删除不是字符串" class="headerlink" title="从字符串中删除不是字符串"></a>从字符串中删除不是字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenRemoveNonASCIIChars_thenRemoved</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String input = <span class="string">"あhello₤"</span>;</span><br><span class="line"> </span><br><span class="line">    String result = CharMatcher.ASCII.retainFrom(input);</span><br><span class="line">    assertEquals(<span class="string">"hello"</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.inRange(<span class="string">'0'</span>, <span class="string">'z'</span>).retainFrom(input);</span><br><span class="line">    assertEquals(<span class="string">"hello"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除不在字符集中的字符"><a href="#删除不在字符集中的字符" class="headerlink" title="删除不在字符集中的字符"></a>删除不在字符集中的字符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenRemoveCharsNotInCharset_thenRemoved</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Charset charset = Charset.forName(<span class="string">"cp437"</span>);</span><br><span class="line">    CharsetEncoder encoder = charset.newEncoder();</span><br><span class="line"> </span><br><span class="line">    Predicate&lt;Character&gt; inRange = <span class="keyword">new</span> Predicate&lt;Character&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Character c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> encoder.canEncode(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    String result = CharMatcher.forPredicate(inRange)</span><br><span class="line">                               .retainFrom(<span class="string">"helloは"</span>);</span><br><span class="line">    assertEquals(<span class="string">"hello"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证字符串"><a href="#验证字符串" class="headerlink" title="验证字符串"></a>验证字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenValidateString_thenValid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String input = <span class="string">"hello"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">boolean</span> result = CharMatcher.JAVA_LOWER_CASE.matchesAllOf(input);</span><br><span class="line">    assertTrue(result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.is(<span class="string">'e'</span>).matchesAnyOf(input);</span><br><span class="line">    assertTrue(result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.JAVA_DIGIT.matchesNoneOf(input);</span><br><span class="line">    assertTrue(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去除字符串空格"><a href="#去除字符串空格" class="headerlink" title="去除字符串空格"></a>去除字符串空格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenTrimString_thenTrimmed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String input = <span class="string">"---hello,,,"</span>;</span><br><span class="line"> </span><br><span class="line">    String result = CharMatcher.is(<span class="string">'-'</span>).trimLeadingFrom(input);</span><br><span class="line">    assertEquals(<span class="string">"hello,,,"</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.is(<span class="string">','</span>).trimTrailingFrom(input);</span><br><span class="line">    assertEquals(<span class="string">"---hello"</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.anyOf(<span class="string">"-,"</span>).trimFrom(input);</span><br><span class="line">    assertEquals(<span class="string">"hello"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="折叠字符串"><a href="#折叠字符串" class="headerlink" title="折叠字符串"></a>折叠字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenCollapseFromString_thenCollapsed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String input = <span class="string">"       hel    lo      "</span>;</span><br><span class="line"> </span><br><span class="line">    String result = CharMatcher.is(<span class="string">' '</span>).collapseFrom(input, <span class="string">'-'</span>);</span><br><span class="line">    assertEquals(<span class="string">"-hel-lo-"</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.is(<span class="string">' '</span>).trimAndCollapseFrom(input, <span class="string">'-'</span>);</span><br><span class="line">    assertEquals(<span class="string">"hel-lo"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenReplaceFromString_thenReplaced</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String input = <span class="string">"apple-banana."</span>;</span><br><span class="line"> </span><br><span class="line">    String result = CharMatcher.anyOf(<span class="string">"-."</span>).replaceFrom(input, <span class="string">'!'</span>);</span><br><span class="line">    assertEquals(<span class="string">"apple!banana!"</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.is(<span class="string">'-'</span>).replaceFrom(input, <span class="string">" and "</span>);</span><br><span class="line">    assertEquals(<span class="string">"apple and banana."</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计字串串出现的次数"><a href="#统计字串串出现的次数" class="headerlink" title="统计字串串出现的次数"></a>统计字串串出现的次数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenCountCharInString_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String input = <span class="string">"a, c, z, 1, 2"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> result = CharMatcher.is(<span class="string">','</span>).countIn(input);</span><br><span class="line">    assertEquals(<span class="number">4</span>, result);</span><br><span class="line"> </span><br><span class="line">    result = CharMatcher.inRange(<span class="string">'a'</span>, <span class="string">'h'</span>).countIn(input);</span><br><span class="line">    assertEquals(<span class="number">2</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 使用<strong>CharMatcher</strong>处理字符串,简单方便.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java使用Guava进行字符串处理&quot;&gt;&lt;a href=&quot;#java使用Guava进行字符串处理&quot; class=&quot;headerlink&quot; title=&quot;java使用Guava进行字符串处理&quot;&gt;&lt;/a&gt;java使用Guava进行字符串处理&lt;/h1&gt;&lt;h2 id=&quot;从
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%BD%BF%E7%94%A8apache%20common%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.matosiki.site/blog/java/java使用apache common工具类/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:05:41.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查询字符串中出现任意字符"><a href="#查询字符串中出现任意字符" class="headerlink" title="查询字符串中出现任意字符"></a>查询字符串中出现任意字符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String string = <span class="string">"baeldung.com"</span>;</span><br><span class="line"><span class="keyword">boolean</span> contained1 = StringUtils.containsAny(string, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">boolean</span> contained2 = StringUtils.containsAny(string, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>);</span><br><span class="line"><span class="keyword">boolean</span> contained3 = StringUtils.containsAny(string, <span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">boolean</span> contained4 = StringUtils.containsAny(string, <span class="string">"xyz"</span>);</span><br><span class="line">  </span><br><span class="line">assertTrue(contained1);</span><br><span class="line">assertFalse(contained2);</span><br><span class="line">assertTrue(contained3);</span><br><span class="line">assertFalse(contained4);</span><br><span class="line"><span class="comment">// 忽略大小写</span></span><br><span class="line">String string = <span class="string">"matosiki.com"</span>;</span><br><span class="line"><span class="keyword">boolean</span> contained = StringUtils.containsIgnoreCase(string, <span class="string">"MATOSIKI"</span>);</span><br><span class="line">  </span><br><span class="line">assertTrue(contained);</span><br></pre></td></tr></table></figure><h1 id="匹配出现次数方法"><a href="#匹配出现次数方法" class="headerlink" title="匹配出现次数方法"></a>匹配出现次数方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String string = <span class="string">"welcome to www.matosiki.com"</span>;</span><br><span class="line"><span class="keyword">int</span> charNum = StringUtils.countMatches(string, <span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">int</span> stringNum = StringUtils.countMatches(string, <span class="string">"com"</span>);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="number">4</span>, charNum);</span><br><span class="line">assertEquals(<span class="number">2</span>, stringNum);</span><br></pre></td></tr></table></figure><h1 id="匹配前缀和后缀的方法"><a href="#匹配前缀和后缀的方法" class="headerlink" title="匹配前缀和后缀的方法"></a>匹配前缀和后缀的方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String string = <span class="string">"matosiki.com"</span>;</span><br><span class="line">String stringWithSuffix = StringUtils.appendIfMissing(string, <span class="string">".com"</span>);</span><br><span class="line">String stringWithPrefix = StringUtils.prependIfMissing(string, <span class="string">"www."</span>);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"matosiki.com"</span>, stringWithSuffix);</span><br><span class="line">assertEquals(<span class="string">"www.matosiki.com"</span>, stringWithPrefix);</span><br></pre></td></tr></table></figure><h1 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String originalString = <span class="string">"matosiki.COM"</span>;</span><br><span class="line">String swappedString = StringUtils.swapCase(originalString);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"MATOSIKI.com"</span>, swappedString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line">String capitalizedString = StringUtils.capitalize(originalString);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"Matosiki.COM"</span>, capitalizedString);</span><br><span class="line"><span class="comment">//首字母不大写</span></span><br><span class="line">String uncapitalizedString = StringUtils.uncapitalize(originalString);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"matosiki.COM"</span>, uncapitalizedString);</span><br></pre></td></tr></table></figure><h1 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String originalString = <span class="string">"matosiki"</span>;</span><br><span class="line">String reversedString = StringUtils.reverse(originalString);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"ikisotam"</span>, reversedString);</span><br><span class="line"><span class="comment">// 分割式翻转</span></span><br><span class="line">String originalString = <span class="string">"www.matosiki.com"</span>;</span><br><span class="line">String reversedString = StringUtils.reverseDelimited(originalString, <span class="string">'.'</span>);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"com.matosiki.www"</span>, reversedString);</span><br></pre></td></tr></table></figure><h1 id="使用rotate-方法旋转"><a href="#使用rotate-方法旋转" class="headerlink" title="使用rotate()方法旋转"></a>使用<strong>rotate()</strong>方法旋转</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String originalString = <span class="string">"matosiki"</span>;</span><br><span class="line">String rotatedString = StringUtils.rotate(originalString, <span class="number">4</span>);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"sikimatos"</span>, rotatedString);</span><br></pre></td></tr></table></figure><h1 id="比较不同"><a href="#比较不同" class="headerlink" title="比较不同"></a>比较不同</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String tutorials = <span class="string">"Baeldung Tutorials"</span>;</span><br><span class="line">String courses = <span class="string">"Baeldung Courses"</span>;</span><br><span class="line">String diff1 = StringUtils.difference(tutorials, courses);</span><br><span class="line">String diff2 = StringUtils.difference(courses, tutorials);</span><br><span class="line">  </span><br><span class="line">assertEquals(<span class="string">"Courses"</span>, diff1);</span><br><span class="line">assertEquals(<span class="string">"Tutorials"</span>, diff2);</span><br></pre></td></tr></table></figure><p>总结: 使用StringUtils对字符串进行一些常用操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查询字符串中出现任意字符&quot;&gt;&lt;a href=&quot;#查询字符串中出现任意字符&quot; class=&quot;headerlink&quot; title=&quot;查询字符串中出现任意字符&quot;&gt;&lt;/a&gt;查询字符串中出现任意字符&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.matosiki.site/blog/java/java分割字符串的三种方式/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:05:50.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用java原生String-split-方法"><a href="#使用java原生String-split-方法" class="headerlink" title="使用java原生String.split()方法"></a>使用java原生<strong>String.split()</strong>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] splitted = <span class="string">"peter,james,thomas"</span>.split(<span class="string">","</span>);  <span class="comment">// 逗号分割</span></span><br><span class="line">String[] splitted = <span class="string">"car jeep scooter"</span>.split(<span class="string">" "</span>); <span class="comment">// 空格分割</span></span><br><span class="line">String[] splitted = <span class="string">"192.168.1.178"</span>.split(<span class="string">"\\."</span>)  <span class="comment">// 点分割</span></span><br><span class="line"></span><br><span class="line">String[] splitted = <span class="string">"b a, e, l.d u, n g"</span>.split(<span class="string">"\\s+|,\\s*|\\.\\s*"</span>));  <span class="comment">//则这表达式多个分割符</span></span><br></pre></td></tr></table></figure><h1 id="使用工具类Common包下的StringUtils-split-方法"><a href="#使用工具类Common包下的StringUtils-split-方法" class="headerlink" title="使用工具类Common包下的StringUtils.split()方法"></a>使用工具类Common包下的<strong>StringUtils.split()</strong>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] splitted = StringUtils.split(<span class="string">"car jeep scooter"</span>); <span class="comment">//默认空白分割</span></span><br></pre></td></tr></table></figure><h1 id="使用guava工具包的Splitter流"><a href="#使用guava工具包的Splitter流" class="headerlink" title="使用guava工具包的Splitter流"></a>使用guava工具包的<strong>Splitter</strong>流</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; resultList = Splitter.on(<span class="string">','</span>)</span><br><span class="line">  .trimResults()</span><br><span class="line">  .omitEmptyStrings()</span><br><span class="line">  .splitToList(<span class="string">"car,jeep,, scooter"</span>);</span><br></pre></td></tr></table></figure><p>总结: String成员方法分割字符串处理简单分割比较容易,但是复杂一点使用工具类还是比较方法. 预先善其事必先利其器,多学习一些工具类的使用,提高开发效率也还不错.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用java原生String-split-方法&quot;&gt;&lt;a href=&quot;#使用java原生String-split-方法&quot; class=&quot;headerlink&quot; title=&quot;使用java原生String.split()方法&quot;&gt;&lt;/a&gt;使用java原生&lt;strong&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E5%9B%9E%E6%96%87%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD/"/>
    <id>http://www.matosiki.site/blog/java/java回文数字判断/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:05:54.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用原生java方式"><a href="#1-使用原生java方式" class="headerlink" title="1. 使用原生java方式"></a>1. 使用原生java方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    String clean = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">int</span> length = clean.length();</span><br><span class="line">    <span class="keyword">int</span> forward = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> backward = length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (backward &gt; forward) &#123; <span class="comment">//两边指针同时变动,比较.</span></span><br><span class="line">        <span class="keyword">char</span> forwardChar = clean.charAt(forward++);</span><br><span class="line">        <span class="keyword">char</span> backwardChar = clean.charAt(backward--);</span><br><span class="line">        <span class="keyword">if</span> (forwardChar != backwardChar)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用字符串reverse比较"><a href="#2-使用字符串reverse比较" class="headerlink" title="2. 使用字符串reverse比较"></a>2. 使用字符串reverse比较</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromeReverseTheString</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    StringBuilder reverse = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String clean = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">char</span>[] plain = clean.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = plain.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        reverse.append(plain[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (reverse.toString()).equals(clean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用stringbuffer-和stringbuilder直接翻转字符串比较"><a href="#3-使用stringbuffer-和stringbuilder直接翻转字符串比较" class="headerlink" title="3. 使用stringbuffer 和stringbuilder直接翻转字符串比较"></a>3. 使用<strong>stringbuffer </strong>和<strong>stringbuilder</strong>直接翻转字符串比较</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromeUsingStringBuilder</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    String clean = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    StringBuilder plain = <span class="keyword">new</span> StringBuilder(clean);</span><br><span class="line">    StringBuilder reverse = plain.reverse();</span><br><span class="line">    <span class="keyword">return</span> (reverse.toString()).equals(clean);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromeUsingStringBuffer</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    String clean = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    StringBuffer plain = <span class="keyword">new</span> StringBuffer(clean);</span><br><span class="line">    StringBuffer reverse = plain.reverse();</span><br><span class="line">    <span class="keyword">return</span> (reverse.toString()).equals(clean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用java8-intStream"><a href="#4-使用java8-intStream" class="headerlink" title="4. 使用java8 intStream"></a>4. 使用java8 intStream</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromeUsingIntStream</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    String temp  = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> IntStream.range(<span class="number">0</span>, temp.length() / <span class="number">2</span>)</span><br><span class="line">      .noneMatch(i -&gt; temp.charAt(i) != temp.charAt(temp.length() - i - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-使用递归调用"><a href="#5-使用递归调用" class="headerlink" title="5. 使用递归调用"></a>5. 使用递归调用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromeRecursive</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">    String clean = text.replaceAll(<span class="string">"\\s+"</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> recursivePalindrome(clean,<span class="number">0</span>,clean.length()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">recursivePalindrome</span><span class="params">(String text, <span class="keyword">int</span> forward, <span class="keyword">int</span> backward)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (forward == backward) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((text.charAt(forward)) != (text.charAt(backward))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (forward &lt; backward + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> recursivePalindrome(text, forward + <span class="number">1</span>, backward - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 回文数验证分两种 一种是<strong>移动下标</strong>比较 另一种是 <strong>翻转</strong> 比较,翻转比较性能没有下标比较好,<br>所以建议使用java8 InStrean<strong>nomatch</strong>方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用原生java方式&quot;&gt;&lt;a href=&quot;#1-使用原生java方式&quot; class=&quot;headerlink&quot; title=&quot;1. 使用原生java方式&quot;&gt;&lt;/a&gt;1. 使用原生java方式&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E5%85%AD%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.matosiki.site/blog/java/java字符类型转字符串类型六种方式/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:05:57.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用String-valueOf-方法"><a href="#1-使用String-valueOf-方法" class="headerlink" title="1. 使用String.valueOf()方法"></a>1. 使用<strong>String.valueOf()</strong>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenChar_whenCallingStringValueOf_shouldConvertToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> givenChar = <span class="string">'x'</span>;</span><br><span class="line"> </span><br><span class="line">    String result = String.valueOf(givenChar);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="string">"x"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用-Character-toString-方法"><a href="#2-使用-Character-toString-方法" class="headerlink" title="2. 使用 Character.toString() 方法"></a>2. 使用<strong> Character.toString()</strong> 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenChar_whenCallingToStringOnCharacter_shouldConvertToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> givenChar = <span class="string">'x'</span>;</span><br><span class="line"> </span><br><span class="line">    String result = Character.toString(givenChar);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="string">"x"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用Character的构造方法"><a href="#3-使用Character的构造方法" class="headerlink" title="3. 使用Character的构造方法"></a>3. 使用<strong>Character</strong>的构造方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenChar_whenCallingCharacterConstructor_shouldConvertToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> givenChar = <span class="string">'x'</span>;</span><br><span class="line"> </span><br><span class="line">    String result = <span class="keyword">new</span> Character(givenChar).toString();</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="string">"x"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-通过String的隐式转换"><a href="#4-通过String的隐式转换" class="headerlink" title="4. 通过String的隐式转换"></a>4. 通过String的隐式转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenChar_whenConcatenated_shouldConvertToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> givenChar = <span class="string">'x'</span>;</span><br><span class="line"> </span><br><span class="line">    String result = givenChar + <span class="string">""</span>;</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="string">"x"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenChar_whenFormated_shouldConvertToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> givenChar = <span class="string">'x'</span>;</span><br><span class="line"> </span><br><span class="line">    String result = String.format(<span class="string">"%c"</span>, givenChar);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="string">"x"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 常用Stirng的隐式转换方式.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用String-valueOf-方法&quot;&gt;&lt;a href=&quot;#1-使用String-valueOf-方法&quot; class=&quot;headerlink&quot; title=&quot;1. 使用String.valueOf()方法&quot;&gt;&lt;/a&gt;1. 使用&lt;strong&gt;String.v
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%96%B9%E6%B3%95/"/>
    <id>http://www.matosiki.site/blog/java/java截取字符串的最后一个字符方法/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:06:27.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-原生java方式-先判断是否为空"><a href="#1-原生java方式-先判断是否为空" class="headerlink" title="1. 原生java方式 先判断是否为空"></a>1. 原生java方式 先判断是否为空</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeLastChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)</span><br><span class="line">      ? <span class="keyword">null</span></span><br><span class="line">      : (s.substring(<span class="number">0</span>, s.length() - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用java8"><a href="#2-使用java8" class="headerlink" title="2. 使用java8"></a>2. 使用java8</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeLastCharOptional</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s)</span><br><span class="line">      .filter(str -&gt; str.length() != <span class="number">0</span>)</span><br><span class="line">      .map(str -&gt; str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>))</span><br><span class="line">      .orElse(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用-apache-common-lang-StringUtils-substring"><a href="#3-使用-apache-common-lang-StringUtils-substring" class="headerlink" title="3. 使用 apache common lang StringUtils.substring()"></a>3. 使用<strong> apache common lang</strong> StringUtils.substring()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String TEST_STRING = <span class="string">"ACBDEF"</span>;</span><br><span class="line">StringUtils.substring(TEST_STRING,<span class="number">0</span>,TEST_STRING.length()-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h1 id="4-使用-StringUtils-chop-方法-因对边缘场景的情况（empty-or-null）时"><a href="#4-使用-StringUtils-chop-方法-因对边缘场景的情况（empty-or-null）时" class="headerlink" title="4. 使用  StringUtils.chop()方法 因对边缘场景的情况（empty or null）时"></a>4. 使用 <strong> StringUtils.chop()</strong>方法 因对边缘场景的情况（empty or null）时</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.chop(TEST_STRING)</span><br></pre></td></tr></table></figure><h1 id="5-使用replaceAll-的正则表达式方式"><a href="#5-使用replaceAll-的正则表达式方式" class="headerlink" title="5. 使用replaceAll() 的正则表达式方式"></a>5. 使用replaceAll() 的正则表达式方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeLastCharRegex</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s == <span class="keyword">null</span>) ? <span class="keyword">null</span> : s.replaceAll(<span class="string">".$"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// java8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeLastCharRegexOptional</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s)</span><br><span class="line">      .map(str -&gt; str.replaceAll(<span class="string">".$"</span>, <span class="string">""</span>))</span><br><span class="line">      .orElse(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：-以上主要使用substring方法截取字符串，复杂的话建议使用正则表达式方式处理。"><a href="#总结：-以上主要使用substring方法截取字符串，复杂的话建议使用正则表达式方式处理。" class="headerlink" title="总结： 以上主要使用substring方法截取字符串，复杂的话建议使用正则表达式方式处理。"></a>总结： 以上主要使用substring方法截取字符串，复杂的话建议使用正则表达式方式处理。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-原生java方式-先判断是否为空&quot;&gt;&lt;a href=&quot;#1-原生java方式-先判断是否为空&quot; class=&quot;headerlink&quot; title=&quot;1. 原生java方式 先判断是否为空&quot;&gt;&lt;/a&gt;1. 原生java方式 先判断是否为空&lt;/h1&gt;&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.matosiki.site/blog/java/java生成随机字符串的五种方式/</id>
    <published>2020-06-04T02:02:07.178Z</published>
    <updated>2020-06-04T02:06:31.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用原生java生成无边界字符串"><a href="#1-使用原生java生成无边界字符串" class="headerlink" title="1. 使用原生java生成无边界字符串"></a>1. 使用原生java生成无边界字符串</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenUsingPlainJava_whenGeneratingRandomStringUnbounded_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] array = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">7</span>]; <span class="comment">// length is bounded by 7</span></span><br><span class="line">    <span class="keyword">new</span> Random().nextBytes(array);</span><br><span class="line">    String generatedString = <span class="keyword">new</span> String(array, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.println(generatedString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用原生java生成右边界字符串"><a href="#2-使用原生java生成右边界字符串" class="headerlink" title="2.使用原生java生成右边界字符串"></a>2.使用原生java生成右边界字符串</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenUsingPlainJava_whenGeneratingRandomStringBounded_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> leftLimit = <span class="number">97</span>; <span class="comment">// letter 'a'</span></span><br><span class="line">    <span class="keyword">int</span> rightLimit = <span class="number">122</span>; <span class="comment">// letter 'z'</span></span><br><span class="line">    <span class="keyword">int</span> targetStringLength = <span class="number">10</span>;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    StringBuilder buffer = <span class="keyword">new</span> StringBuilder(targetStringLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; targetStringLength; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> randomLimitedInt = leftLimit + (<span class="keyword">int</span>) </span><br><span class="line">          (random.nextFloat() * (rightLimit - leftLimit + <span class="number">1</span>));</span><br><span class="line">        buffer.append((<span class="keyword">char</span>) randomLimitedInt);</span><br><span class="line">    &#125;</span><br><span class="line">    String generatedString = buffer.toString();</span><br><span class="line"> </span><br><span class="line">    System.out.println(generatedString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用-apache-common-lang-生成有边界字符串-只用字母"><a href="#3-使用-apache-common-lang-生成有边界字符串-只用字母" class="headerlink" title="3.使用 apache common lang 生成有边界字符串(只用字母)"></a>3.使用 <strong>apache common lang</strong> 生成有边界字符串(只用字母)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenUsingApache_whenGeneratingRandomStringBounded_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> useLetters = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> useNumbers = <span class="keyword">false</span>;</span><br><span class="line">    String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);</span><br><span class="line"> </span><br><span class="line">    System.out.println(generatedString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用-apache-common-lang-生成有边界字母"><a href="#4-使用-apache-common-lang-生成有边界字母" class="headerlink" title="4. 使用 apache common lang 生成有边界字母"></a>4. 使用 <strong>apache common lang</strong> 生成有边界字母</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenUsingApache_whenGeneratingRandomAlphabeticString_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String generatedString = RandomStringUtils.randomAlphabetic(<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(generatedString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-使用-apache-common-lang-生成有边界字母和数字"><a href="#5-使用-apache-common-lang-生成有边界字母和数字" class="headerlink" title="5. 使用 apache common lang 生成有边界字母和数字"></a>5. 使用 <strong>apache common lang</strong> 生成有边界字母和数字</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenUsingApache_whenGeneratingRandomAlphanumericString_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String generatedString = RandomStringUtils.randomAlphanumeric(<span class="number">10</span>);</span><br><span class="line">    System.out.println(generatedString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-使用lang包的生成方式简单-自己原生方式也可以实现"><a href="#总结-使用lang包的生成方式简单-自己原生方式也可以实现" class="headerlink" title="总结: 使用lang包的生成方式简单,自己原生方式也可以实现."></a>总结: 使用lang包的生成方式简单,自己原生方式也可以实现.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用原生java生成无边界字符串&quot;&gt;&lt;a href=&quot;#1-使用原生java生成无边界字符串&quot; class=&quot;headerlink&quot; title=&quot;1. 使用原生java生成无边界字符串&quot;&gt;&lt;/a&gt;1. 使用原生java生成无边界字符串&lt;/h1&gt;&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java8%E6%96%B0%E5%A2%9EStringJoiner%E7%94%A8%E6%B3%95/"/>
    <id>http://www.matosiki.site/blog/java/java8新增StringJoiner用法/</id>
    <published>2020-06-04T02:02:07.177Z</published>
    <updated>2020-06-04T02:05:21.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用java8的StringJoiner连接-附带分割和前缀和后缀"><a href="#使用java8的StringJoiner连接-附带分割和前缀和后缀" class="headerlink" title="使用java8的StringJoiner连接,附带分割和前缀和后缀"></a>使用java8的StringJoiner连接,附带分割和前缀和后缀</h1><h1 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenAddingElements_thenJoinedElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>, PREFIX, SUFFIX);</span><br><span class="line">    joiner.add(<span class="string">"Red"</span>)</span><br><span class="line">      .add(<span class="string">"Green"</span>)</span><br><span class="line">      .add(<span class="string">"Blue"</span>);</span><br><span class="line"> </span><br><span class="line">    assertEquals(joiner.toString(), <span class="string">"[Red,Green,Blue]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用for循环添加内容"><a href="#2-使用for循环添加内容" class="headerlink" title="2. 使用for循环添加内容"></a>2. 使用for循环添加内容</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenAddingListElements_thenJoinedListElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; rgbList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    rgbList.add(<span class="string">"Red"</span>);</span><br><span class="line">    rgbList.add(<span class="string">"Green"</span>);</span><br><span class="line">    rgbList.add(<span class="string">"Blue"</span>);</span><br><span class="line"> </span><br><span class="line">    StringJoiner rgbJoiner = <span class="keyword">new</span> StringJoiner(</span><br><span class="line">      <span class="string">","</span>, PREFIX, SUFFIX);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (String color : rgbList) &#123;</span><br><span class="line">        rgbJoiner.add(color);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    assertEquals(rgbJoiner.toString(), <span class="string">"[Red,Green,Blue]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用构造方式"><a href="#使用构造方式" class="headerlink" title="使用构造方式"></a>使用构造方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String PREFIX = <span class="string">"["</span>;</span><br><span class="line"><span class="keyword">private</span> String SUFFIX = <span class="string">"]"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenEmptyJoinerWithoutPrefixSuffix_thenEmptyString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>);</span><br><span class="line">  </span><br><span class="line">    assertEquals(<span class="number">0</span>, joiner.toString().length());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenEmptyJoinerJoinerWithPrefixSuffix_thenPrefixSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringJoiner joiner = <span class="keyword">new</span> StringJoiner(</span><br><span class="line">      <span class="string">","</span>, PREFIX, SUFFIX);</span><br><span class="line">  </span><br><span class="line">    assertEquals(joiner.toString(), PREFIX + SUFFIX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并Joiner"><a href="#合并Joiner" class="headerlink" title="合并Joiner"></a>合并Joiner</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenMergingJoiners_thenReturnMerged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringJoiner rgbJoiner = <span class="keyword">new</span> StringJoiner(</span><br><span class="line">      <span class="string">","</span>, PREFIX, SUFFIX);</span><br><span class="line">    StringJoiner cmybJoiner = <span class="keyword">new</span> StringJoiner(</span><br><span class="line">      <span class="string">"-"</span>, PREFIX, SUFFIX);</span><br><span class="line"> </span><br><span class="line">    rgbJoiner.add(<span class="string">"Red"</span>)</span><br><span class="line">      .add(<span class="string">"Green"</span>)</span><br><span class="line">      .add(<span class="string">"Blue"</span>);</span><br><span class="line">    cmybJoiner.add(<span class="string">"Cyan"</span>)</span><br><span class="line">      .add(<span class="string">"Magenta"</span>)</span><br><span class="line">      .add(<span class="string">"Yellow"</span>)</span><br><span class="line">      .add(<span class="string">"Black"</span>);</span><br><span class="line"> </span><br><span class="line">    rgbJoiner.merge(cmybJoiner);</span><br><span class="line"> </span><br><span class="line">    assertEquals(</span><br><span class="line">      rgbJoiner.toString(), </span><br><span class="line">      <span class="string">"[Red,Green,Blue,Cyan-Magenta-Yellow-Black]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenUsedWithinCollectors_thenJoined</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; rgbList = Arrays.asList(<span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>);</span><br><span class="line">    String commaSeparatedRGB = rgbList.stream()</span><br><span class="line">      .map(color -&gt; color.toString())</span><br><span class="line">      .collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line"> </span><br><span class="line">    assertEquals(commaSeparatedRGB, <span class="string">"Red,Green,Blue"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-构造一个简单分割的字符串-使用StringJoiner方式很不错-也可以使用流的方式"><a href="#总结-构造一个简单分割的字符串-使用StringJoiner方式很不错-也可以使用流的方式" class="headerlink" title="总结: 构造一个简单分割的字符串,使用StringJoiner方式很不错,也可以使用流的方式."></a>总结: 构造一个简单分割的字符串,使用<strong>StringJoiner</strong>方式很不错,也可以使用流的方式.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用java8的StringJoiner连接-附带分割和前缀和后缀&quot;&gt;&lt;a href=&quot;#使用java8的StringJoiner连接-附带分割和前缀和后缀&quot; class=&quot;headerlink&quot; title=&quot;使用java8的StringJoiner连接,附带分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%B8%ADStringTokenizer%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.matosiki.site/blog/java/java中StringTokenizer使用/</id>
    <published>2020-06-04T02:02:07.177Z</published>
    <updated>2020-06-04T02:05:25.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用特殊分割符分割String类型一般使用StringTokenize"><a href="#使用特殊分割符分割String类型一般使用StringTokenize" class="headerlink" title="使用特殊分割符分割String类型一般使用StringTokenize()"></a>使用特殊分割符分割String类型一般使用<strong>StringTokenize()</strong></h2><h1 id="1-使用逗号分割-再用枚举递归"><a href="#1-使用逗号分割-再用枚举递归" class="headerlink" title="1. 使用逗号分割,再用枚举递归"></a>1. 使用逗号分割,再用枚举递归</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTokens</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; tokens = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(str, <span class="string">","</span>);</span><br><span class="line">    <span class="keyword">while</span> (tokenizer.hasMoreElements()) &#123;</span><br><span class="line">        tokens.add(tokenizer.nextToken());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用java8"><a href="#2-使用java8" class="headerlink" title="2. 使用java8"></a>2. 使用java8</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTokensWithCollection</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.list(<span class="keyword">new</span> StringTokenizer(str, <span class="string">","</span>)).stream()</span><br><span class="line">      .map(token -&gt; (String) token)  <span class="comment">// 注意这里返回类型为Object类型需要强转</span></span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-自定义分割符"><a href="#3-自定义分割符" class="headerlink" title="3. 自定义分割符"></a>3. 自定义分割符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tokens.add(tokenizer.nextToken(<span class="string">"e"</span>));</span><br></pre></td></tr></table></figure><h1 id="读取CVS文件"><a href="#读取CVS文件" class="headerlink" title="读取CVS文件"></a>读取CVS文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTokensFromFile</span><span class="params">( String path , String delim )</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; tokens = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    String currLine = <span class="string">""</span>;</span><br><span class="line">    StringTokenizer tokenizer;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">        <span class="keyword">new</span> InputStreamReader(Application.class.getResourceAsStream( </span><br><span class="line">          <span class="string">"/"</span> + path )))) &#123;</span><br><span class="line">        <span class="keyword">while</span> (( currLine = br.readLine()) != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> StringTokenizer( currLine , delim );</span><br><span class="line">            <span class="keyword">while</span> (tokenizer.hasMoreElements()) &#123;</span><br><span class="line">                tokens.add(tokenizer.nextToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> MyTokenizer myTokenizer = <span class="keyword">new</span> MyTokenizer();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; expectedTokensForString = Arrays.asList(</span><br><span class="line">      <span class="string">"Welcome"</span> , <span class="string">"to"</span> , <span class="string">"baeldung.com"</span> );</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; expectedTokensForFile = Arrays.asList(</span><br><span class="line">      <span class="string">"1"</span> , <span class="string">"IND"</span> , <span class="string">"India"</span> , </span><br><span class="line">      <span class="string">"2"</span> , <span class="string">"MY"</span> , <span class="string">"Malaysia"</span> , </span><br><span class="line">      <span class="string">"3"</span>, <span class="string">"AU"</span> , <span class="string">"Australia"</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_thenGetListOfString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"Welcome,to,baeldung.com"</span>;</span><br><span class="line">        List&lt;String&gt; actualTokens = myTokenizer.getTokens( str );</span><br><span class="line">  </span><br><span class="line">        assertEquals( expectedTokensForString, actualTokens );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenFile_thenGetListOfString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; actualTokens = myTokenizer.getTokensFromFile( </span><br><span class="line">          <span class="string">"data.csv"</span>, <span class="string">"|"</span> );</span><br><span class="line">  </span><br><span class="line">        assertEquals( expectedTokensForFile , actualTokens );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用特殊分割符分割String类型一般使用StringTokenize&quot;&gt;&lt;a href=&quot;#使用特殊分割符分割String类型一般使用StringTokenize&quot; class=&quot;headerlink&quot; title=&quot;使用特殊分割符分割String类型一般使用S
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%B8%ADString%E7%B1%BB%E5%9E%8B%E8%BD%ACInteger%E6%88%96int%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.matosiki.site/blog/java/java中String类型转Integer或int类型/</id>
    <published>2020-06-04T02:02:07.177Z</published>
    <updated>2020-06-04T02:06:40.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用-Integer-parseInt"><a href="#1-使用-Integer-parseInt" class="headerlink" title="1. 使用 Integer.parseInt() "></a>1. 使用<strong> Integer.parseInt() </strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_whenParsingInt_shouldConvertToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"42"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> result = Integer.parseInt(givenString);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="number">42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-使用-Integer-valueOf-不建议使用-内部使用缓存机制"><a href="#2-使用-Integer-valueOf-不建议使用-内部使用缓存机制" class="headerlink" title="2. 使用  Integer.valueOf()  ,(不建议使用)内部使用缓存机制"></a>2. 使用<strong>  Integer.valueOf() </strong> ,(不建议使用)内部使用缓存机制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_whenCallingIntegerValueOf_shouldConvertToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"42"</span>;</span><br><span class="line"> </span><br><span class="line">    Integer result = Integer.valueOf(givenString);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="keyword">new</span> Integer(<span class="number">42</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用Integer构造方法"><a href="#3-使用Integer构造方法" class="headerlink" title="3. 使用Integer构造方法"></a>3. 使用Integer构造方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_whenCallingIntegerConstructor_shouldConvertToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"42"</span>;</span><br><span class="line"> </span><br><span class="line">    Integer result = <span class="keyword">new</span> Integer(givenString);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="keyword">new</span> Integer(<span class="number">42</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用-Integer-decode-方法"><a href="#4-使用-Integer-decode-方法" class="headerlink" title="4. 使用 Integer.decode()方法"></a>4. 使用 <strong>Integer.decode()</strong>方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_whenCallingIntegerDecode_shouldConvertToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"42"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> result = Integer.decode(givenString);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="number">42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上方法如果转换错误会抛出NumberFormatException异常"><a href="#以上方法如果转换错误会抛出NumberFormatException异常" class="headerlink" title="以上方法如果转换错误会抛出NumberFormatException异常"></a>以上方法如果转换错误会抛出<strong>NumberFormatException</strong>异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = NumberFormatException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenInvalidInput_whenParsingInt_shouldThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"nan"</span>;</span><br><span class="line">    Integer.parseInt(givenString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-使用guava-工具-如果解析失败-会跳过返回空值"><a href="#5-使用guava-工具-如果解析失败-会跳过返回空值" class="headerlink" title="5. 使用guava 工具 ,如果解析失败,会跳过返回空值"></a>5. 使用guava 工具 ,如果解析失败,会跳过返回空值</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenString_whenTryParse_shouldConvertToInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String givenString = <span class="string">"42"</span>;</span><br><span class="line"> </span><br><span class="line">    Integer result = Ints.tryParse(givenString);</span><br><span class="line"> </span><br><span class="line">    assertThat(result).isEqualTo(<span class="number">42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 使用java原生方式简单,但每次要考虑到解析异常也挺烦的,建议使用guava 的<strong>Ints.tryParse</strong>方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用-Integer-parseInt&quot;&gt;&lt;a href=&quot;#1-使用-Integer-parseInt&quot; class=&quot;headerlink&quot; title=&quot;1. 使用 Integer.parseInt() &quot;&gt;&lt;/a&gt;1. 使用&lt;strong&gt; Integ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.matosiki.site/blog/java/java%E4%B8%AD%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%ACASCII%E7%BC%96%E7%A0%81/"/>
    <id>http://www.matosiki.site/blog/java/java中十六进制转ASCII编码/</id>
    <published>2020-06-04T02:02:07.177Z</published>
    <updated>2020-06-04T02:05:28.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将字符串转换成十六进制"><a href="#将字符串转换成十六进制" class="headerlink" title="将字符串转换成十六进制"></a>将字符串转换成十六进制</h1><ol><li>将每个字符串转换成数组</li><li>将数组中字符转换成整型</li><li>使用Integer.toHexString()方法转换成十六进制</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">asciiToHex</span><span class="params">(String asciiStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = asciiStr.toCharArray();</span><br><span class="line">    StringBuilder hex = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : chars) &#123;</span><br><span class="line">        hex.append(Integer.toHexString((<span class="keyword">int</span>) ch));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> hex.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>截断一个十六进制为两个字符组</li><li>使用<strong>Integer.parseInt(hex, 16)</strong>方法强转字符</li><li>把每个字符添加的<strong>StringBuilder</strong>上</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hexToAscii</span><span class="params">(String hexStr)</span> </span>&#123;</span><br><span class="line">    StringBuilder output = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexStr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">        String str = hexStr.substring(i, i + <span class="number">2</span>);</span><br><span class="line">        output.append((<span class="keyword">char</span>) Integer.parseInt(str, <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">whenHexToAscii</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String asciiString = <span class="string">"www.matosiki.com"</span>;</span><br><span class="line">    String hexEquivalent = </span><br><span class="line">      <span class="string">"3737373737373265363236313635366336343735366536373265363336663664"</span>;</span><br><span class="line"> </span><br><span class="line">    assertEquals(asciiString, hexToAscii(hexEquivalent));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">whenAsciiToHex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String asciiString = <span class="string">"www.matosiki.com"</span>;</span><br><span class="line">    String hexEquivalent = </span><br><span class="line">      <span class="string">"3737373737373265363236313635366336343735366536373265363336663664"</span>;</span><br><span class="line"> </span><br><span class="line">    assertEquals(hexEquivalent, asciiToHex(asciiString));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 以上同16进制与ascii码相互转换.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将字符串转换成十六进制&quot;&gt;&lt;a href=&quot;#将字符串转换成十六进制&quot; class=&quot;headerlink&quot; title=&quot;将字符串转换成十六进制&quot;&gt;&lt;/a&gt;将字符串转换成十六进制&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;将每个字符串转换成数组&lt;/li&gt;
&lt;li&gt;将数组中字符转
      
    
    </summary>
    
    
  </entry>
  
</feed>
