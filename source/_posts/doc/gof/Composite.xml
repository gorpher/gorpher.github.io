<?xml version="1.0" encoding="UTF-8"?>
<pattern:specification xmlns="http://www.ibm.com/software/rational/designpattern" xmlns:argument="http://www.ibm.com/software/rational/designpattern/argument" xmlns:attribute="http://www.ibm.com/software/rational/designpattern/attribute" xmlns:dependency="http://www.ibm.com/software/rational/designpattern/dependency" xmlns:operation="http://www.ibm.com/software/rational/designpattern/operation" xmlns:participant="http://www.ibm.com/software/rational/designpattern/participant" xmlns:pattern="http://www.ibm.com/software/rational/designpattern/pattern" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/software/rational/designpattern
..\schemas\designpattern.xsd">
	<pattern:name>Composite</pattern:name>
	<pattern:description>composite.html</pattern:description>
	<pattern:assignedLanguage>Analysis</pattern:assignedLanguage>
	<pattern:participants>
		<!-- Client -->
		<pattern:participant>
			<participant:name>Client</participant:name>
			<participant:required>false</participant:required>
			<participant:exportControl>public</participant:exportControl>
			<participant:multiplicity>1</participant:multiplicity>
			<participant:isAnyType>true</participant:isAnyType>
			<!-- attributes -->
			<participant:attributes>
				<participant:attribute>
					<attribute:name>theComponent</attribute:name>
					<attribute:type>%Component%</attribute:type>
					<attribute:exportControl>private</attribute:exportControl>
					<attribute:cardinality>1</attribute:cardinality>
				</participant:attribute>
			</participant:attributes>
		</pattern:participant>
		<!--Component-->
		<pattern:participant>
			<participant:name>Component</participant:name>
			<participant:required>true</participant:required>
			<participant:multiplicity>1</participant:multiplicity>
			<participant:exportControl>public</participant:exportControl>
			<participant:isAbstract>true</participant:isAbstract>
			<participant:isInterface>false</participant:isInterface>
			<!--
			<participant:documentation><![CDATA[
Component. Declares the interface for objects in the composition
]]></participant:documentation>
-->
			<!--attributes-->
			<!--operations-->
			<participant:operations>
				<participant:operation>
					<operation:name>defaultMethod</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>true</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
This method is only an example of what the user should add as a default
]]></operation:documentation>
-->
					<!-- arguments -->
				</participant:operation>
				<participant:operation>
					<operation:name>getChild</operation:name>
					<operation:returnType>%Component%</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Get a composite. Assume the subclass will be leaf class instead of composite. So it returns null. For composite subclass, it can override this method to return itself as composite.
]]></operation:documentation>
-->
					<!--arguments-->
				</participant:operation>
				<participant:operation>
					<operation:name>addComponent</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Add child Component. It can be composite or leaf
]]></operation:documentation>
-->
					<!--arguments-->
					<operation:arguments>
						<operation:argument>
							<argument:name>component</argument:name>
							<argument:type>%Component%</argument:type>
						</operation:argument>
					</operation:arguments>
				</participant:operation>
				<participant:operation>
					<operation:name>removeComponent</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Remove child Component. It can be composite or leaf
]]></operation:documentation>
-->
					<!--arguments-->
					<operation:arguments>
						<operation:argument>
							<argument:name>component</argument:name>
							<argument:type>%Component%</argument:type>
						</operation:argument>
					</operation:arguments>
				</participant:operation>
			</participant:operations>
		</pattern:participant>
		<!--Leaf-->
		<!-- We will describe only a generic one.  All the rest will be similar-->
		<pattern:participant>
			<participant:name>Leaf</participant:name>
			<participant:required>false</participant:required>
			<participant:multiplicity>n</participant:multiplicity>
			<participant:exportControl>public</participant:exportControl>
			<participant:isAbstract>false</participant:isAbstract>
			<participant:isInterface>false</participant:isInterface>
			<!--
			<participant:documentation><![CDATA[
Leaf. Represents leaf objects in the composition
]]></participant:documentation>
-->
			<!--attibutes-->
			<!--operations-->
			<participant:operations>
				<participant:operation>
					<operation:name>defaultMethod</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
default Method
]]></operation:documentation>
-->
				</participant:operation>
			</participant:operations>
			<!--relationships-->
			<!--Extends the classes:-->
			<participant:extends>%Component%</participant:extends>
		</pattern:participant>
		<!--Composite-->
		<pattern:participant>
			<participant:name>Composite</participant:name>
			<participant:required>true</participant:required>
			<participant:multiplicity>1</participant:multiplicity>
			<participant:exportControl>public</participant:exportControl>
			<participant:isAbstract>false</participant:isAbstract>
			<participant:isInterface>false</participant:isInterface>
			<!--
			<participant:documentation><![CDATA[
Composite. Defines behavior for components having children. Stores child Components implements child-related operations in the Component interface
]]></participant:documentation>
-->
			<!--attributes-->
			<participant:attributes>
				<participant:attribute>
					<attribute:name>components</attribute:name>
					<attribute:type>%Component%</attribute:type>
					<attribute:exportControl>private</attribute:exportControl>
					<attribute:cardinality>n</attribute:cardinality>
					<attribute:containment>containmentObject</attribute:containment>
					<!--
					<attribute:documentation><![CDATA[
Vector to Store Child Components
]]></attribute:documentation>
-->
				</participant:attribute>
			</participant:attributes>
			<!--operations-->
			<participant:operations>
				<participant:operation>
					<operation:name>defaultMethod</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--					<operation:documentation><![CDATA[
defaultMethod. It iterates all its children  (Leaf and Composite) and calls defaultMethod defined in them.
]]></operation:documentation>
-->
					<!-- arguments -->
				</participant:operation>
				<participant:operation>
					<operation:name>getChild</operation:name>
					<operation:returnType>%Component%</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Get a composite.Returns itself to override parent method, since it is an composite.
]]></operation:documentation>
-->
					<!-- arguments -->
				</participant:operation>
				<participant:operation>
					<operation:name>addComponent</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Add child Component. It can be Leaf or Composite
]]></operation:documentation>
-->
					<!--arguments-->
					<operation:arguments>
						<operation:argument>
							<argument:name>component</argument:name>
							<argument:type>%Component%</argument:type>
						</operation:argument>
					</operation:arguments>
				</participant:operation>
				<participant:operation>
					<operation:name>removeComponent</operation:name>
					<operation:returnType>void</operation:returnType>
					<operation:exportControl>public</operation:exportControl>
					<operation:isAbstract>false</operation:isAbstract>
					<!--
					<operation:documentation><![CDATA[
Remove child Component.  It can be Leaf or Composite
]]></operation:documentation>
-->
					<!--arguments-->
					<operation:arguments>
						<operation:argument>
							<argument:name>component</argument:name>
							<argument:type>%Component%</argument:type>
						</operation:argument>
					</operation:arguments>
				</participant:operation>
			</participant:operations>
			<!--relationships-->
			<!--Extends the classes:-->
			<participant:extends>%Component%</participant:extends>
		</pattern:participant>
	</pattern:participants>
</pattern:specification>
